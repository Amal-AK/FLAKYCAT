@Test(timeout = 60000)
public void testHA() throws Exception {
    HBaseTestingUtility hBaseTestingUtility = new HBaseTestingUtility();
    hBaseTestingUtility.startMiniDFSCluster(1);
    Configuration hConf = hBaseTestingUtility.getConfiguration();
    hConf.setBoolean("fs.hdfs.impl.disable.cache", true);
    InMemoryZKServer zkServer = InMemoryZKServer.builder().build();
    zkServer.startAndWait();
    try {
        CConfiguration cConf = CConfiguration.create();
        cConf.set(CFG_HDFS_USER, System.getProperty("user.name"));
        cConf.set(QUORUM, zkServer.getConnectionStr());
        cConf.set(CFG_LOCAL_DATA_DIR, tmpFolder.newFolder().getAbsolutePath());
        Injector injector = Guice.createInjector(new ConfigModule(cConf), new ZKClientModule(), new LocationRuntimeModule().getInMemoryModules(), new DiscoveryRuntimeModule().getDistributedModules(), new TransactionMetricsModule(), new DataFabricModules().getDistributedModules(), Modules.override(new DataSetsModules().getDistributedModules()).with(new AbstractModule() {
            @Override
            protected void configure() {
                bind(MetadataStore.class).to(NoOpMetadataStore.class);
            }
        }));
        ZKClientService zkClient = injector.getInstance(ZKClientService.class);
        zkClient.startAndWait();
        final Table table = createTable("myTable");
        try {
            TransactionSystemClient txClient = injector.getInstance(TransactionSystemClient.class);
            TransactionExecutor txExecutor = new DefaultTransactionExecutor(txClient, ImmutableList.of(((TransactionAware) (table))));
            TransactionService first = createTxService(zkServer.getConnectionStr(), Networks.getRandomPort(), hConf, tmpFolder.newFolder());
            first.startAndWait();
            Assert.assertNotNull(txClient.startShort());
            verifyGetAndPut(table, txExecutor, null, "val1");
            TransactionService second = createTxService(zkServer.getConnectionStr(), Networks.getRandomPort(), hConf, tmpFolder.newFolder());
            second.startAndWait();
            TimeUnit.SECONDS.sleep(1);
            Assert.assertNotNull(txClient.startShort());
            verifyGetAndPut(table, txExecutor, "val1", "val2");
            first.stopAndWait();
            Assert.assertNotNull(txClient.startShort());
            verifyGetAndPut(table, txExecutor, "val2", "val3");
            TransactionService third = createTxService(zkServer.getConnectionStr(), Networks.getRandomPort(), hConf, tmpFolder.newFolder());
            third.start();
            second.stopAndWait();
            Assert.assertNotNull(txClient.startShort());
            verifyGetAndPut(table, txExecutor, "val3", "val4");
            third.stop();
        } finally {
            dropTable("myTable", cConf);
            zkClient.stopAndWait();
        }
    } finally {
        zkServer.stop();
    }
}