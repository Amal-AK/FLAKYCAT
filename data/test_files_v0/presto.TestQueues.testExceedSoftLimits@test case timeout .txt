@Test(timeOut = 60000)
public void testExceedSoftLimits() throws Exception {
    queryRunner.installPlugin(new ResourceGroupManagerPlugin());
    queryRunner.getCoordinator().getResourceGroupManager().get().setConfigurationManager("file", ImmutableMap.of("resource-groups.config-file", getResourceFilePath("resource_groups_config_soft_limits.json")));
    QueryId scheduled1 = createScheduledQuery(queryRunner);
    waitForQueryState(queryRunner, scheduled1, RUNNING);
    QueryId scheduled2 = createScheduledQuery(queryRunner);
    waitForQueryState(queryRunner, scheduled2, RUNNING);
    QueryId scheduled3 = createScheduledQuery(queryRunner);
    waitForQueryState(queryRunner, scheduled3, RUNNING);
    QueryId backfill1 = createBackfill(queryRunner);
    QueryId scheduled4 = createScheduledQuery(queryRunner);
    cancelQuery(queryRunner, scheduled1);
    waitForQueryState(queryRunner, backfill1, RUNNING);
    cancelQuery(queryRunner, scheduled2);
    cancelQuery(queryRunner, scheduled3);
    cancelQuery(queryRunner, scheduled4);
    QueryId backfill2 = createBackfill(queryRunner);
    waitForQueryState(queryRunner, backfill2, RUNNING);
    QueryId backfill3 = createBackfill(queryRunner);
    waitForQueryState(queryRunner, backfill3, RUNNING);
    QueryId backfill4 = createBackfill(queryRunner);
    QueryId scheduled5 = createScheduledQuery(queryRunner);
    cancelQuery(queryRunner, backfill1);
    waitForQueryState(queryRunner, scheduled5, RUNNING);
    cancelQuery(queryRunner, backfill2);
    cancelQuery(queryRunner, backfill3);
    cancelQuery(queryRunner, backfill4);
    cancelQuery(queryRunner, scheduled5);
    waitForQueryState(queryRunner, scheduled5, FAILED);
}