public void testListenerFailures() throws InterruptedException {
        int iters = iterations(10, 100);
        for (int i = 0; i < iters; i++) {
            try (TestIteration iteration = new TestIteration()) {
                iteration.transport.endConnectMode();
                final CountDownLatch latch = new CountDownLatch(1);
                final AtomicInteger finalFailures = new AtomicInteger();
                final AtomicReference<Throwable> finalFailure = new AtomicReference<>();
                final AtomicReference<TestResponse> response = new AtomicReference<>();
                ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>();
                final AtomicInteger preSendFailures = new AtomicInteger();
                iteration.transportClientNodesService.execute((node, retryListener) -> {
                    if (rarely()) {
                        preSendFailures.incrementAndGet();
                        throw new IllegalArgumentException();
                    }
                    iteration.transportService.sendRequest(node, "action", new TestRequest(),
                            TransportRequestOptions.EMPTY, new TransportResponseHandler<TestResponse>() {
                            }, actionListener);

                    assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true));
                    assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(), lessThanOrEqualTo(1));
                    if (iteration.transport.successes() == 1) {
                        assertThat(finalFailures.get(), equalTo(0));
                        assertThat(finalFailure.get(), nullValue());
                        assertThat(response.get(), notNullValue());
                    } else {
                        assertThat(finalFailures.get(), equalTo(1));
                        assertThat(finalFailure.get(), notNullValue());
                        assertThat(response.get(), nullValue());
                        if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) {
                            assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class));
                        }
                    }
                    assertThat(iteration.transport.triedNodes().size(), lessThanOrEqualTo(iteration.listNodesCount));
                    assertThat(iteration.transport.triedNodes().size(), equalTo(iteration.transport.connectTransportExceptions() + iteration.transport.failures() + iteration.transport.successes()));
                });
            }

        }
    }