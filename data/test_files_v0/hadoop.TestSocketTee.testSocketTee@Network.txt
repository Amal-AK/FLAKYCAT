
public void testSocketTee() throws Exception {
    Configuration conf = new Configuration();
    conf.set("chukwaCollector.pipeline", (SocketTeeWriter.class.getCanonicalName() + ",")
     + CaptureWriter.class.getCanonicalName());
    conf.set("chukwaCollector.writerClass", PipelineStageWriter.class.getCanonicalName());
    PipelineStageWriter psw = new PipelineStageWriter();
    psw.init(conf);
    System.out.println("pipeline established; now pushing a chunk");
    ArrayList<Chunk> l = new ArrayList<Chunk>();
    l.add(new ChunkImpl("dt", "name", 1, new byte[]{ 'a' }, null));
    psw.add(l);
    assertEquals(1, outputs.size());
    System.out.println("connecting to localhost");
    Socket s = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    DataOutputStream dos = new DataOutputStream(s.getOutputStream());
    dos.write((SocketTeeWriter.WRITABLE + " datatype=dt3\n").getBytes());
    DataInputStream dis = new DataInputStream(s.getInputStream());
    System.out.println("command send");
    dis.readFully(new byte[3]);
    l = new ArrayList<Chunk>();
    l.add(new ChunkImpl("dt2", "name", 1, new byte[]{ 'b' }, null));
    psw.add(l);
    assertEquals(2, outputs.size());
    System.out.println("sent nonmatching chunk");
    l = new ArrayList<Chunk>();
    l.add(new ChunkImpl("dt3", "name", 1, new byte[]{ 'c' }, null));
    psw.add(l);
    assertEquals(3, outputs.size());
    System.out.println("sent matching chunk");
    System.out.println("reading...");
    ChunkImpl chunk = ChunkImpl.read(dis);
    assertTrue(chunk.getDataType().equals("dt3"));
    System.out.println(chunk);
    dis.close();
    dos.close();
    s.close();
    Socket s2 = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    s2.getOutputStream().write((SocketTeeWriter.RAW + " content=.*d.*\n").getBytes());
    dis = new DataInputStream(s2.getInputStream());
    dis.readFully(new byte[3]);
    l = new ArrayList<Chunk>();
    l.add(new ChunkImpl("dt3", "name", 1, new byte[]{ 'd' }, null));
    psw.add(l);
    assertEquals(4, outputs.size());
    int len = dis.readInt();
    assertTrue(len == 1);
    byte[] data = new byte[100];
    int read = dis.read(data);
    assertTrue(read == 1);
    assertTrue(data[0] == 'd');
    s2.close();
    dis.close();
    l = new ArrayList<Chunk>();
    l.add(new ChunkImpl("dt3", "name", 3, new byte[]{ 'c', 'a', 'd' }, null));
    psw.add(l);
    assertEquals(5, outputs.size());
    Socket s3 = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    s3.getOutputStream().write((SocketTeeWriter.ASCII_HEADER + " all\n").getBytes());
    dis = new DataInputStream(s3.getInputStream());
    dis.readFully(new byte[3]);
    l = new ArrayList<Chunk>();
    chunk = new ChunkImpl("dataTypeFoo", "streamName", 4, new byte[]{ 't', 'e', 'x', 't' }, null);
    chunk.setSource("hostNameFoo");
    l.add(chunk);
    psw.add(l);
    assertEquals(6, outputs.size());
    len = dis.readInt();
    data = new byte[len];
    read = dis.read(data);
    String rcvd = new String(data);
    System.out.println((((("got " + read) + "/") + len) + " bytes: ") + rcvd);
    assertTrue("hostNameFoo dataTypeFoo streamName 4\ntext".equals(rcvd));
    s3.close();
    dis.close();
}