public void testConnectAndDisconnect() throws Exception {
    assertThat(connectionCounter.getTotalConnections()).isEqualTo(0L);
    assertThat(connectionCounter.getConnectionCount()).isEqualTo(0);
    final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(1);
    try {
        final ChannelFuture connectFuture = new Bootstrap()
                .group(clientEventLoopGroup)
                .channel(NioSocketChannel.class)
                .handler(new LoggingHandler())
                .localAddress(InetAddress.getLocalHost(), 0)
                .connect(serverChannel.localAddress())
                .sync();
        final Channel clientChannel = connectFuture.channel();
        assertThat(clientChannel.isWritable()).isTrue();
        clientChannel.writeAndFlush(Unpooled.wrappedBuffer("canary".getBytes(StandardCharsets.UTF_8))).syncUninterruptibly();
        readCompleteLatch.await(LATCH_TIMEOUT, TimeUnit.SECONDS);
        assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L);
        assertThat(connectionCounter.getConnectionCount()).isEqualTo(1);
        clientChannel.close().syncUninterruptibly();
    } finally {
        clientEventLoopGroup.shutdownGracefully();
        clientEventLoopGroup.awaitTermination(1, TimeUnit.SECONDS);
    }
    disconnectedLatch.await(LATCH_TIMEOUT, TimeUnit.SECONDS);
    assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L);
    assertThat(connectionCounter.getConnectionCount()).isEqualTo(0);
}