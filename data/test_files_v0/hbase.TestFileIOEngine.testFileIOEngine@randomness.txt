@Test
  public void testFileIOEngine() throws IOException {
    long totalCapacity = 6 * 1024 * 1024; 
    String[] filePaths = { "testFileIOEngine1", "testFileIOEngine2",
        "testFileIOEngine3" };
    long sizePerFile = totalCapacity / filePaths.length; 
    List<Long> boundaryStartPositions = new ArrayList<Long>();
    boundaryStartPositions.add(0L);
    for (int i = 1; i < filePaths.length; i++) {
      boundaryStartPositions.add(sizePerFile * i - 1);
      boundaryStartPositions.add(sizePerFile * i);
      boundaryStartPositions.add(sizePerFile * i + 1);
    }
    List<Long> boundaryStopPositions = new ArrayList<Long>();
    for (int i = 1; i < filePaths.length; i++) {
      boundaryStopPositions.add(sizePerFile * i - 1);
      boundaryStopPositions.add(sizePerFile * i);
      boundaryStopPositions.add(sizePerFile * i + 1);
    }
    boundaryStopPositions.add(sizePerFile * filePaths.length - 1);
    FileIOEngine fileIOEngine = new FileIOEngine(totalCapacity, false, filePaths);
    try {
      for (int i = 0; i < 500; i++) {
        int len = (int) Math.floor(Math.random() * 100);
        long offset = (long) Math.floor(Math.random() * totalCapacity % (totalCapacity - len));
        if (i < boundaryStartPositions.size()) {
          offset = boundaryStartPositions.get(i);
        } else if ((i - boundaryStartPositions.size()) < boundaryStopPositions.size()) {

          offset = boundaryStopPositions.get(i - boundaryStartPositions.size()) - len + 1;
        } else if (i % 2 == 0) {
          offset = Math.max(1, i % filePaths.length) * sizePerFile - len / 2;
        }
        byte[] data1 = new byte[len];
        for (int j = 0; j < data1.length; ++j) {
          data1[j] = (byte) (Math.random() * 255);
        }
        fileIOEngine.write(ByteBuffer.wrap(data1), offset);
        BufferGrabbingDeserializer deserializer = new BufferGrabbingDeserializer();
        fileIOEngine.read(offset, len, deserializer);
        ByteBuff data2 = deserializer.getDeserializedByteBuff();
        for (int j = 0; j < data1.length; ++j) {
          assertTrue(data1[j] == data2.get(j));
        }
      }
    } finally {
      fileIOEngine.shutdown();
      for (String filePath : filePaths) {
        File file = new File(filePath);
        if (file.exists()) {
          file.delete();
        }
      }
    }