public void testScanPolicyObserver() throws Exception {
    byte[] tableName = Bytes.toBytes("testScanPolicyObserver");
    HTableDescriptor desc = new HTableDescriptor(tableName);
    HColumnDescriptor hcd = new HColumnDescriptor(F).setMaxVersions(10).setTimeToLive(1);
    desc.addFamily(hcd);
    TEST_UTIL.getHBaseAdmin().createTable(desc);
    HTable t = new HTable(new Configuration(TEST_UTIL.getConfiguration()), tableName);
    long now = EnvironmentEdgeManager.currentTimeMillis();
    ZooKeeperWatcher zkw = HConnectionManager.getConnection(TEST_UTIL.getConfiguration()).getZooKeeperWatcher();
    ZooKeeper zk = zkw.getRecoverableZooKeeper().getZooKeeper();
    ZKUtil.createWithParents(zkw, node);
    zk.setData(node, Bytes.toBytes(now - (3600 * 1000)), -1);
    LOG.debug("Set time: " + Bytes.toLong(Bytes.toBytes(now - (3600 * 1000))));
    long ts = now - 2000;
    Put p = new Put(R);
    p.add(F, Q, ts, Q);
    t.put(p);
    p = new Put(R);
    p.add(F, Q, ts + 1, Q);
    t.put(p);
    Get g = new Get(R);
    g.setMaxVersions(10);
    Result r = t.get(g);
    assertEquals(2, r.size());
    TEST_UTIL.flush(tableName);
    TEST_UTIL.compact(tableName, true);
    g = new Get(R);
    g.setMaxVersions(10);
    r = t.get(g);
    assertEquals(2, r.size());
    zk.setData(node, Bytes.toBytes(now), -1);
    LOG.debug("Set time: " + now);
    TEST_UTIL.compact(tableName, true);
    g = new Get(R);
    g.setMaxVersions(10);
    r = t.get(g);
    assertEquals(0, r.size());
    t.close();
}