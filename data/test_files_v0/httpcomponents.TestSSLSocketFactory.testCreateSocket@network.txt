    public void testCreateSocket() throws Exception {
        HttpParams params = new BasicHttpParams();
        String password = "changeit";
        char[] pwd = password.toCharArray();
        RSAPrivateCrtKeySpec k;
        k = new RSAPrivateCrtKeySpec(new BigInteger(RSA_PUBLIC_MODULUS, 16));
        PrivateKey pk = KeyFactory.getInstance("RSA").generatePrivate(k);
        KeyStore ks = KeyStore.getInstance("JKS");
        ks.load(null, null);

        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        InputStream in1, in2, in3;
        in1 = new ByteArrayInputStream(X509_FOO);
        in2 = new ByteArrayInputStream(X509_INTERMEDIATE_CA);
        in3 = new ByteArrayInputStream(X509_ROOT_CA);
        X509Certificate[] chain = new X509Certificate[3];
        chain[0] = (X509Certificate) cf.generateCertificate(in1);
        chain[1] = (X509Certificate) cf.generateCertificate(in2);
        chain[2] = (X509Certificate) cf.generateCertificate(in3);

        ks.setKeyEntry("RSA_KEY", pk, pwd, chain);
        ks.setCertificateEntry("CERT", chain[2]); 

        File tempFile = File.createTempFile("junit", "jks");
        try {
            String path = tempFile.getCanonicalPath();
            tempFile.deleteOnExit();
            FileOutputStream fOut = new FileOutputStream(tempFile);
            ks.store(fOut, pwd);
            fOut.close();

            System.setProperty("javax.net.ssl.keyStore", path);
            System.setProperty("javax.net.ssl.keyStorePassword", password);
            System.setProperty("javax.net.ssl.trustStore", path);
            System.setProperty("javax.net.ssl.trustStorePassword", password);
            ServerSocketFactory server = SSLServerSocketFactory.getDefault(); 
            ServerSocket serverSocket = server.createServerSocket(0);
            serverSocket.setSoTimeout(30000);
            int port = serverSocket.getLocalPort();
            SSLSocketFactory ssf = SSLSocketFactory.getSocketFactory();
            ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            IOException[] e = new IOException[1];
            boolean[] success = new boolean[1];
            listen(serverSocket, e, success);
            Socket s = ssf.connectSocket(null, "localhost", port,
                                         null, 0, params);
            exerciseSocket(s, e, success);        
            success[0] = false;
            listen(serverSocket, e, success);
            s = new Socket("localhost", port);
            s = ssf.createSocket(s, "localhost", port, true);
            exerciseSocket(s, e, success);

        } finally {
             tempFile.delete();
        }
    }