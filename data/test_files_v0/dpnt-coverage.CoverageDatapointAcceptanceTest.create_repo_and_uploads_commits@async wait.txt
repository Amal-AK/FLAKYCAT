 public void create_repo_and_uploads_commits() throws Exception {
        String challengeId = "TCH";
        String participantId = generateId();
        String s3destination = String.format("%s/%s/file.srcs", challengeId, participantId);
        TestSrcsFile srcsForTestChallenge = new TestSrcsFile("HmmmLang_R1Cov33_R2Cov44.srcs");
        S3Event s3Event = localS3Bucket.putObject(srcsForTestChallenge.asFile(), s3destination);
        coverageUploadHandler.handleRequest(convertToMap(wrapAsSNSEvent(s3Event)),NO_CONTEXT);
        waitForQueueToReceiveEvents();
        assertThat(languageDetectedEvents.size(), equalTo(1));
        System.out.println("Received language detected events: "+languageDetectedEvents);
        ProgrammingLanguageDetectedEvent languageEvent = languageDetectedEvents.get(0);
        assertThat(languageEvent.getParticipant(), equalTo(participantId));
        assertThat(languageEvent.getChallengeId(), equalTo(challengeId));
        assertThat(languageEvent.getProgrammingLanguage(), equalTo("HmmmLang"));
        assertThat(coverageComputedEvents.size(), equalTo(2));
        System.out.println("Received coverage events: "+coverageComputedEvents);
        coverageComputedEvents.sort(Comparator.comparing(CoverageComputedEvent::getRoundId));
        CoverageComputedEvent coverageRound1 = coverageComputedEvents.get(0);
        assertThat(coverageRound1.getParticipant(), equalTo(participantId));
        assertThat(coverageRound1.getRoundId(), equalTo(challengeId+"_R1"));
        assertThat(coverageRound1.getCoverage(), equalTo(33));
        CoverageComputedEvent coverageRound2 = coverageComputedEvents.get(1);
        assertThat(coverageRound2.getParticipant(), equalTo(participantId));
        assertThat(coverageRound2.getRoundId(), equalTo(challengeId+"_R2"));
        assertThat(coverageRound2.getCoverage(), equalTo(44));
    }