public void testKmeansSVD() throws Exception {
    DistanceMeasure measure = new EuclideanDistanceMeasure();
    Path output = getTestTempDirPath("output");
    Path tmp = getTestTempDirPath("tmp");
    DistributedLanczosSolver solver = new DistributedLanczosSolver();
    Configuration conf = new Configuration();
    solver.setConf(conf);
    Path testData = getTestTempDirPath("testdata");
    int sampleDimension = sampleData.get(0).get().size();
    int desiredRank = 15;
    solver.run(testData, output, tmp, null, sampleData.size(), sampleDimension, false, desiredRank, 0.5, 0.0, true);
    Path cleanEigenvectors = new Path(output, EigenVerificationJob.CLEAN_EIGENVECTORS);
    Matrix a = new DenseMatrix(sampleData.size(), sampleDimension);
    int i = 0;
    for (VectorWritable vw : sampleData) {
        a.assignRow(i++, vw.get());
    }
    Matrix p = new DenseMatrix(39, desiredRank - 1);
    FileSystem fs = FileSystem.get(cleanEigenvectors.toUri(), conf);
    i = 0;
    for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(cleanEigenvectors, conf)) {
        Vector v = value.get();
        p.assignColumn(i, v);
        i++;
    }
    Matrix sData = a.times(p);
    Path svdData = new Path(output, "svddata");
    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, svdData, IntWritable.class, VectorWritable.class);
    try {
        IntWritable key = new IntWritable();
        VectorWritable value = new VectorWritable();
        for (int row = 0; row < sData.numRows(); row++) {
            key.set(row);
            value.set(sData.viewRow(row));
            writer.append(key, value);
        }
    } finally {
        Closeables.closeQuietly(writer);
    }
    CanopyDriver.run(conf, svdData, output, measure, 8, 4, false, 0.0, true);
    KMeansDriver.run(svdData, new Path(output, "clusters-0"), output, measure, 0.001, 10, true, true);
    ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf, output, 10), new Path(output, "clusteredPoints"));
    clusterDumper.printClusters(termDictionary);
}