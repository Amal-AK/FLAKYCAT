public void shouldComplainIfServerHTTPSPortIsAlreadyTaken() throws IOException
    {
        int serverPort = PortAuthority.allocatePort();
        int httpsPort = PortAuthority.allocatePort();
        ListenSocketAddress unContestedAddress = new ListenSocketAddress( "localhost", serverPort );
        ListenSocketAddress contestedAddress = new ListenSocketAddress( "localhost", httpsPort );
        try ( ServerSocket ignored = new ServerSocket(
                contestedAddress.getPort(), 0, InetAddress.getByName( contestedAddress.getHostname() ) ) )
        {
            AssertableLogProvider logProvider = new AssertableLogProvider();
            CommunityNeoServer server = CommunityServerBuilder.server( logProvider )
                    .onAddress( unContestedAddress )
                    .onHttpsAddress( contestedAddress )
                    .withHttpsEnabled()
                    .usingDataDir( folder.directory( name.getMethodName() ).getAbsolutePath() )
                    .build();
            try
            {
                server.start();
                fail( "Should have reported failure to start" );
            }
            catch ( ServerStartupException e )
            {
                assertThat( e.getMessage(), containsString( "Starting Neo4j failed" ) );
            }
            logProvider.assertAtLeastOnce(
                    AssertableLogProvider.inLog( containsString( "CommunityNeoServer" ) ).error(
                            "Failed to start Neo4j on %s: %s",
                            unContestedAddress,
                            format( "At least one of the addresses %s or %s is already in use, cannot bind to it.",
                                    unContestedAddress, contestedAddress )
                    )
            );
            server.stop();
        }
    }