public void shouldTerminateWhenFutureIsCancelled() throws InterruptedException {

        GracefulExecutorServicesShutdown shutdown = GracefulExecutorServicesShutdown.initiate();
        shutdown.timeout(Duration.ofMillis(15000));
        ExecutorService executorService = mock(ExecutorService.class);
        when(executorService.isShutdown()).thenReturn(true);
        AtomicBoolean terminated = new AtomicBoolean();
        AtomicBoolean awaitTerminationInterrupted = new AtomicBoolean();
        
        when(executorService.isTerminated()).thenAnswer(invocation -> terminated.get());
      
        when(executorService.awaitTermination(anyLong(), any())).thenAnswer(invocation  -> {
            long timeout = invocation.getArgument(0);
            TimeUnit unit = invocation.getArgument(1);
          
            try {
                Thread.sleep(unit.toMillis(timeout));
            } catch (InterruptedException e) {
                awaitTerminationInterrupted.set(true);
              
                Thread.currentThread().interrupt();
                throw e;
            }
            
            throw new IllegalStateException("Thread.sleep should have been interrupted");
        });
        when(executorService.shutdownNow()).thenAnswer(invocation -> {
            terminated.set(true);
            return null;
        });
      
        shutdown.shutdown(executorService);
        CompletableFuture<Void> future = shutdown.handle();
        future.cancel(false);
        Awaitility.await().untilAsserted(() -> assertTrue(awaitTerminationInterrupted.get(),
                "awaitTermination should have been interrupted"));
       
        verify(executorService, times(1)).awaitTermination(anyLong(), any());
        verify(executorService, times(1)).shutdownNow();
    }