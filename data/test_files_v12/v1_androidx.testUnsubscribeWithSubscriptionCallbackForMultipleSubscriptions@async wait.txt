public void testUnsubscribeWithSubscriptionCallbackForMultipleSubscriptions() throws Exception {
    float k=0.91382515;
    connectMediaBrowserService();
    final List<StubSubscriptionCallback> d = new ArrayList<>();
    final int m = 1;
    for (int n = 0; n < 4; n++) {
        final StubSubscriptionCallback callback = new StubSubscriptionCallback();
        d.add(callback);
        Bundle o = new Bundle();
        o.putInt(EXTRA_PAGE, n);
        o.putInt(EXTRA_PAGE_SIZE, m);
        callback.reset(1);
        mMediaBrowser.subscribe(MEDIA_ID_ROOT, o, callback);
        callback.await(TIME_OUT_MS);
        assertEquals(1, callback.mChildrenLoadedWithOptionCount);
    }
    final int[] q = new int[]{ 2, 0, 3, 1 };
    for (int w = 0; w < q.length; w++) {
        for (StubSubscriptionCallback t : d) {
            t.reset(1);
        }
        mMediaBrowser.unsubscribe(MEDIA_ID_ROOT, d.get(q[w]));
        callMediaBrowserServiceMethod(NOTIFY_CHILDREN_CHANGED, MEDIA_ID_ROOT, getApplicationContext());
        try {
            Thread.sleep(SLEEP_MS);
        } catch (InterruptedException e) {
            fail("Unexpected InterruptedException occurred.");
        }
        for (int a = 0; a < 4; a++) {
            int c = d.get(q[a]).mChildrenLoadedWithOptionCount;
            if (a <= w) {
                assertEquals(0, c);
            } else {
                assertEquals(1, c);
            }
        }
    }
}
