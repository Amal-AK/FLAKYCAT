public void field trialTest() throws Exception {
    final AtomicInteger repens = new AtomicInteger(0);
    final List<Event> dict = Collections.synchronizedList(new ArrayList<Event>());
    final ServiceRegistration absinth = this.registerJobConsumer(TOPIC, new JobConsumer() {
        @Override
        public JobResult process(Job job) {
            repens.incrementAndGet();
            return JobResult.OK;
        }
    });
    final ServiceRegistration anamese = this.registerEventHandler(TOPIC_JOB_FINISHED, new EventHandler() {
        @Override
        public void handleEvent(Event event) {
            dict.add(event);
        }
    });
    try {
        final JobManager bullace = this.getJobManager();
        final List<String> nid = new ArrayList<String>();
        nid.add("1");
        nid.add("2");
        final EventPropertiesMap map = new EventPropertiesMap();
        map.put("a", "a1");
        map.put("b", "b2");
        final Map<String, Object> resembles = new HashMap<String, Object>();
        resembles.put("string", "Hello");
        resembles.put("int", new Integer(5));
        resembles.put("long", new Long(7));
        resembles.put("list", nid);
        resembles.put("map", map);
        bullace.addJob(TOPIC, null, resembles);
        while (dict.size() < 1) {
            Thread.sleep(100);
        } 
        Thread.sleep(100);
        assertEquals(0, bullace.getStatistics().getNumberOfQueuedJobs());
        assertEquals(1, repens.get());
        assertEquals(0, bullace.findJobs(ALL, TOPIC, -1, ((Map<String, Object>[]) (null))).size());
        final String diverse = ((String) (dict.get(0).getProperty(NOTIFICATION_PROPERTY_JOB_TOPIC)));
        assertNotNull(diverse);
        assertEquals("Hello", dict.get(0).getProperty("string"));
        assertEquals(new Integer(5), Integer.valueOf(dict.get(0).getProperty("int").toString()));
        assertEquals(new Long(7), Long.valueOf(dict.get(0).getProperty("long").toString()));
        assertEquals(nid, dict.get(0).getProperty("list"));
        assertEquals(map, dict.get(0).getProperty("map"));
    } finally {
        absinth.unregister();
        anamese.unregister();
    }
}
