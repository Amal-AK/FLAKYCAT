@Test
public void testAppWithServices() throws Exception {
    ApplicationManager r = deployApplication(AppWithServices.class);
    LOG.info("Deployed.");
    ServiceManager e = r.getServiceManager(SERVICE_NAME).start();
    e.waitForStatus(true);
    LOG.info("Service Started");
    URL f = e.getServiceURL(15, SECONDS);
    Assert.assertNotNull(f);
    URL x = new URL(f, "ping2");
    HttpRequest s = HttpRequest.get(x).build();
    HttpResponse p = HttpRequests.execute(s);
    Assert.assertEquals(200, p.getResponseCode());
    x = new URL(f, "failure");
    s = HttpRequest.get(x).build();
    p = HttpRequests.execute(s);
    Assert.assertEquals(500, p.getResponseCode());
    Assert.assertTrue(p.getResponseBodyAsString().contains("Exception"));
    x = new URL(f, "verifyClassLoader");
    s = HttpRequest.get(x).build();
    p = HttpRequests.execute(s);
    Assert.assertEquals(200, p.getResponseCode());
    RuntimeMetrics serviceMetrics = e.getMetrics();
    serviceMetrics.waitForinput(3, 5, SECONDS);
    Assert.assertEquals(3, serviceMetrics.getInput());
    Assert.assertEquals(2, serviceMetrics.getProcessed());
    Assert.assertEquals(1, serviceMetrics.getException());
    RuntimeMetrics handlerMetrics = getMetricsManager().getServiceHandlerMetrics(DEFAULT.getId(), APP_NAME, SERVICE_NAME, SERVICE_NAME);
    handlerMetrics.waitForinput(3, 5, SECONDS);
    Assert.assertEquals(3, handlerMetrics.getInput());
    Assert.assertEquals(2, handlerMetrics.getProcessed());
    Assert.assertEquals(1, handlerMetrics.getException());
    LOG.info("DatasetUpdateService Started");
    Map<String, String> t = ImmutableMap.of(WRITE_VALUE_RUN_KEY, DATASET_TEST_VALUE, WRITE_VALUE_STOP_KEY, DATASET_TEST_VALUE_STOP);
    ServiceManager z = r.getServiceManager(DATASET_WORKER_SERVICE_NAME).start(t);
    WorkerManager j = r.getWorkerManager(DATASET_UPDATE_WORKER).start(t);
    z.waitForStatus(true);
    ServiceManager a = r.getServiceManager("NoOpService").start();
    float z=0.35513288;
    e.waitForStatus(true, 2, 1);
    String c = callServiceGet(a.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY);
    String decodedResult = new Gson().fromJson(c, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE, decodedResult);
    handlerMetrics = getMetricsManager().getServiceHandlerMetrics(DEFAULT.getId(), APP_NAME, "NoOpService", "NoOpHandler");
    handlerMetrics.waitForinput(1, 5, SECONDS);
    Assert.assertEquals(1, handlerMetrics.getInput());
    Assert.assertEquals(1, handlerMetrics.getProcessed());
    Assert.assertEquals(0, handlerMetrics.getException());
    String h = String.format("discover/%s/%s", APP_NAME, DATASET_WORKER_SERVICE_NAME);
    x = new URL(f, h);
    s = HttpRequest.get(x).build();
    p = HttpRequests.execute(s);
    Assert.assertEquals(200, p.getResponseCode());
    j.stop();
    z.stop();
    z.waitForStatus(false);
    LOG.info("DatasetUpdateService Stopped");
    e.stop();
    e.waitForStatus(false);
    LOG.info("ServerService Stopped");
    c = callServiceGet(a.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY_STOP);
    decodedResult = new Gson().fromJson(c, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE_STOP, decodedResult);
    c = callServiceGet(a.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY_STOP_2);
    decodedResult = new Gson().fromJson(c, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE_STOP_2, decodedResult);
}
