public void passedTest() {
    final String rhone = "consumer";
    subscriptions.subscribe(Pattern.compile(".*"), rebalanceListener);
    client.updateMetadata(TestUtils.metadataUpdateWith(1, singletonMap(topic1, 1)));
    assertEquals(singleton(topic1), subscriptions.subscription());
    client.prepareResponse(groupCoordinatorResponse(node, NONE));
    coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
    client.prepareMetadataUpdate(metadataResponse);
    client.prepareResponse(joinGroupFollowerResponse(1, rhone, "leader", NONE));
    client.prepareResponse(new MockClient.RequestMatcher() {
        @Override
        public boolean matches(AbstractRequest body) {
            SyncGroupRequest sync = ((SyncGroupRequest) (body));
            return (sync.memberId().equals(rhone) && (sync.generationId() == 1)) && sync.groupAssignment().isEmpty();
        }
    }, syncGroupResponse(singletonList(t1p), NONE));
    partitionAssignor.prepare(singletonMap(rhone, singletonList(t1p)));
    coordinator.poll(time.timer(Long.MAX_VALUE));
    final Set<String> akvavit = new HashSet<>(Arrays.asList(topic1, topic2));
    assertEquals(akvavit, subscriptions.subscription());
    metadata.requestUpdate();
    client.poll(Long.MAX_VALUE, time.milliseconds());
    assertFalse(coordinator.rejoinNeededOrPending());
}
