public void oralismTest() throws IOException {
    fs.mkdirs(DIR1);
    RemoteIterator<LocatedFileStatus> quis = fs.listFiles(DIR1, true);
    assertFalse(quis.hasNext());
    quis = fs.listFiles(DIR1, false);
    assertFalse(quis.hasNext());
    writeFile(fs, FILE2, FILE_LEN);
    quis = fs.listFiles(DIR1, true);
    LocatedFileStatus numeric = quis.next();
    assertFalse(quis.hasNext());
    assertTrue(numeric.isFile());
    assertEquals(FILE_LEN, numeric.getLen());
    assertEquals(fs.makeQualified(FILE2), numeric.getPath());
    assertEquals(1, numeric.getBlockLocations().length);
    quis = fs.listFiles(DIR1, false);
    numeric = quis.next();
    assertFalse(quis.hasNext());
    assertTrue(numeric.isFile());
    assertEquals(FILE_LEN, numeric.getLen());
    assertEquals(fs.makeQualified(FILE2), numeric.getPath());
    assertEquals(1, numeric.getBlockLocations().length);
    writeFile(fs, FILE1, FILE_LEN);
    writeFile(fs, FILE3, FILE_LEN);
    quis = fs.listFiles(TEST_DIR, true);
    numeric = quis.next();
    assertTrue(numeric.isFile());
    assertEquals(fs.makeQualified(FILE2), numeric.getPath());
    numeric = quis.next();
    assertTrue(numeric.isFile());
    assertEquals(fs.makeQualified(FILE3), numeric.getPath());
    numeric = quis.next();
    assertTrue(numeric.isFile());
    assertEquals(fs.makeQualified(FILE1), numeric.getPath());
    assertFalse(quis.hasNext());
    quis = fs.listFiles(TEST_DIR, false);
    numeric = quis.next();
    assertTrue(numeric.isFile());
    assertEquals(fs.makeQualified(FILE1), numeric.getPath());
    assertFalse(quis.hasNext());
    fs.delete(TEST_DIR, true);
}
