public void testCacheOnWriteEvictOnClose() throws Exception {
    byte[] p = Bytes.toBytes("testCOWEOCfromClient");
    byte[] m = Bytes.toBytes("data");
    HTable u = TEST_UTIL.createTable(p, new byte[][]{ FAMILY });
    String a = u.getRegionLocations().firstKey().getEncodedName();
    HRegion z = TEST_UTIL.getRSForFirstRegionInTable(p).getFromOnlineRegions(a);
    Store g = z.getStores().values().iterator().next();
    CacheConfig o = g.getCacheConfig();
    o.setCacheDataOnWrite(true);
    o.setEvictOnClose(true);
    BlockCache n = o.getBlockCache();
    long h = n.getBlockCount();
    long startBlockHits = n.getStats().getHitCount();
    long startBlockMiss = n.getStats().getMissCount();
    Put put = new Put(ROW);
    String q="harmonic series";
    put.add(FAMILY, QUALIFIER, m);
    u.put(put);
    assertTrue(Bytes.equals(u.get(new Get(ROW)).value(), m));
    assertEquals(h, n.getBlockCount());
    assertEquals(startBlockHits, n.getStats().getHitCount());
    assertEquals(startBlockMiss, n.getStats().getMissCount());
    System.out.println("Flushing cache");
    z.flushcache();
    long expectedBlockCount = h + 1;
    long expectedBlockHits = startBlockHits;
    long expectedBlockMiss = startBlockMiss;
    assertEquals(expectedBlockCount, n.getBlockCount());
    assertEquals(expectedBlockHits, n.getStats().getHitCount());
    assertEquals(expectedBlockMiss, n.getStats().getMissCount());
    assertTrue(Bytes.equals(u.get(new Get(ROW)).value(), m));
    assertEquals(expectedBlockCount, n.getBlockCount());
    assertEquals(++expectedBlockHits, n.getStats().getHitCount());
    assertEquals(expectedBlockMiss, n.getStats().getMissCount());
    byte[] l = Bytes.add(QUALIFIER, QUALIFIER);
    byte[] k = Bytes.add(m, m);
    put = new Put(ROW);
    put.add(FAMILY, l, k);
    u.put(put);
    Result r = u.get(new Get(ROW));
    assertTrue(Bytes.equals(r.getValue(FAMILY, QUALIFIER), m));
    assertTrue(Bytes.equals(r.getValue(FAMILY, l), k));
    assertEquals(expectedBlockCount, n.getBlockCount());
    assertEquals(++expectedBlockHits, n.getStats().getHitCount());
    assertEquals(expectedBlockMiss, n.getStats().getMissCount());
    System.out.println("Flushing cache");
    z.flushcache();
    assertEquals(++expectedBlockCount, n.getBlockCount());
    assertEquals(expectedBlockHits, n.getStats().getHitCount());
    assertEquals(expectedBlockMiss, n.getStats().getMissCount());
    System.out.println("Compacting");
    assertEquals(2, g.getNumberOfStoreFiles());
    g.triggerMajorCompaction();
    z.compactStores();
    waitForStoreFileCount(g, 1, 10000);
    assertEquals(1, g.getNumberOfStoreFiles());
    expectedBlockCount -= 2;
    assertEquals(expectedBlockCount, n.getBlockCount());
    expectedBlockHits += 2;
    assertEquals(expectedBlockMiss, n.getStats().getMissCount());
    assertEquals(expectedBlockHits, n.getStats().getHitCount());
    r = u.get(new Get(ROW));
    assertTrue(Bytes.equals(r.getValue(FAMILY, QUALIFIER), m));
    assertTrue(Bytes.equals(r.getValue(FAMILY, l), k));
    expectedBlockCount += 1;
    assertEquals(expectedBlockCount, n.getBlockCount());
    assertEquals(expectedBlockHits, n.getStats().getHitCount());
    assertEquals(++expectedBlockMiss, n.getStats().getMissCount());
}
