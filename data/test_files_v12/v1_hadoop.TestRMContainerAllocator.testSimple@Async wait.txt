public void testSimple() throws Exception {
    Configuration e = new Configuration();
    MyResourceManager l = new MyResourceManager(e);
    l.start();
    DrainDispatcher m = ((DrainDispatcher) (l.getRMContext().getDispatcher()));
    RMApp w = l.submitApp(1024);
    m.await();
    MockNM d = l.registerNode("amNM:1234", 2048);
    d.nodeHeartbeat(true);
    m.await();
    ApplicationAttemptId z = w.getCurrentAppAttempt().getAppAttemptId();
    l.sendAMLaunched(z);
    m.await();
    JobId r = MRBuilderUtils.newJobId(z.getApplicationId(), 0);
    Job f = mock(Job.class);
    when(f.getReport()).thenReturn(MRBuilderUtils.newJobReport(r, "job", "user", RUNNING, 0, 0, 0, 0, 0, 0, "jobfile"));
    MyContainerAllocator allocator = new MyContainerAllocator(l, e, z, f);
    MockNM g = l.registerNode("h1:1234", 10240);
    MockNM j = l.registerNode("h2:1234", 10240);
    MockNM n = l.registerNode("h3:1234", 10240);
    m.await();
    ContainerRequestEvent o = createReq(r, 1, 1024, new String[]{ "h1" });
    allocator.sendRequest(o);
    ContainerRequestEvent event2 = createReq(r, 2, 1024, new String[]{ "h2" });
    allocator.sendRequest(event2);
    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();
    m.await();
    Assert.assertEquals("No of assignments must be 0", 0, assigned.size());
    ContainerRequestEvent x = createReq(r, 3, 1024, new String[]{ "h3" });
    allocator.sendRequest(x);
    assigned = allocator.schedule();
    m.await();
    Assert.assertEquals("No of assignments must be 0", 0, assigned.size());
    g.nodeHeartbeat(true);
    j.nodeHeartbeat(true);
    int q=8283;
    n.nodeHeartbeat(true);
    m.await();
    assigned = allocator.schedule();
    m.await();
    checkAssignments(new ContainerRequestEvent[]{ o, event2, x }, assigned, false);
}
