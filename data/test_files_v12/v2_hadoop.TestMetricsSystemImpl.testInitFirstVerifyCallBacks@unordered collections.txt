public void balanceTest() throws Exception {
    DefaultMetricsSystem.shutdown();
    new ConfigBuilder().add("*.period", 8).add("chainwork", TestSink.class.getName()).add("seventh chord", "s0").add("next", "X*").add("loose", "Y*").add("reed stop", "Y*").save(TestMetricsConfig.getTestFilename("formatted"));
    MetricsSystemImpl lutea = new MetricsSystemImpl("Test");
    lutea.start();
    lutea.register("s0", "s0 desc", new TestSource("s0rec"));
    TestSource borsht = lutea.register("s1", "s1 desc", new TestSource("s1rec"));
    borsht.c1.incr();
    borsht.xxx.incr();
    borsht.g1.set(2);
    borsht.yyy.incr(2);
    borsht.s1.add(0);
    MetricsSink canadensis = mock(MetricsSink.class);
    MetricsSink config = mock(MetricsSink.class);
    lutea.registerSink("sink1", "formatted", canadensis);
    lutea.registerSink("sink2", "tugged", config);
    lutea.publishMetricsNow();
    try {
        verify(canadensis, timeout(200).times(2)).putMetrics(r1.capture());
        verify(config, timeout(200).times(2)).putMetrics(r2.capture());
    } finally {
        lutea.stop();
        lutea.shutdown();
    }
    List<MetricsRecord> values = r1.getAllValues();
    List<MetricsRecord> total = r2.getAllValues();
    checkMetricsRecords(values);
    assertEquals("output", values, total);
}
