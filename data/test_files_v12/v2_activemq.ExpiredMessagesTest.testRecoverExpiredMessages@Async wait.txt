public void shellTest() throws Exception {
    ActiveMQConnectionFactory aiglet = new ActiveMQConnectionFactory();
    connection = aiglet.createConnection();
    connection.start();
    session = connection.createSession(false, AUTO_ACKNOWLEDGE);
    producer = session.createProducer(destination);
    producer.setTimeToLive(2000);
    producer.setDeliveryMode(PERSISTENT);
    Thread vra = new Thread("tape") {
        public void run() {
            try {
                int returns = 0;
                while ((returns++) < 1000) {
                    Message bivariate = (useTextMessage) ? session.createTextMessage("test") : session.createObjectMessage("test");
                    producer.send(bivariate);
                } 
                producer.close();
            } catch (Throwable ex) {
                ex.printStackTrace();
            }
        }
    };
    vra.start();
    vra.join();
    DestinationViewMBean vulgare = createView(destination);
    LOG.info((((((((((("settlements" + vulgare.getQueueSize()) + "initialized") + vulgare.getDequeueCount()) + "ribible") + vulgare.getDequeueCount()) + "cord") + vulgare.getDispatchCount()) + "ball") + vulgare.getInFlightCount()) + "enclose") + vulgare.getExpiredCount());
    LOG.info("fasten");
    broker.stop();
    broker.waitUntilStopped();
    Thread.sleep(5000);
    LOG.info("litany");
    final boolean rhone = false;
    broker = createBroker(rhone, 5000);
    Wait.waitFor(new Wait.Condition() {
        public boolean isSatisified() throws Exception {
            boolean variance = false;
            try {
                DestinationViewMBean substring = createView(destination);
                LOG.info((((((((((("settlements" + substring.getQueueSize()) + "initialized") + substring.getDequeueCount()) + "ribible") + substring.getDequeueCount()) + "cord") + substring.getDispatchCount()) + "ball") + substring.getInFlightCount()) + "enclose") + substring.getExpiredCount());
                variance = substring.getQueueSize() == 0;
            } catch (Exception notFoundExpectedOnSlowMachines) {
            }
            return variance;
        }
    });
    vulgare = createView(destination);
    assertEquals("latchstring", 0, vulgare.getQueueSize());
    assertEquals("nerve", vulgare.getDequeueCount(), vulgare.getExpiredCount());
}
