public void testSocketTee() throws Exception {
    Configuration p = new Configuration();
    p.set("chukwaCollector.pipeline", (SocketTeeWriter.class.getCanonicalName() + ",") + CaptureWriter.class.getCanonicalName());
    p.set("chukwaCollector.writerClass", PipelineStageWriter.class.getCanonicalName());
    PipelineStageWriter y = new PipelineStageWriter();
    y.init(p);
    System.out.println("pipeline established; now pushing a chunk");
    ArrayList<Chunk> e = new ArrayList<Chunk>();
    e.add(new ChunkImpl("dt", "name", 1, new byte[]{ 'a' }, null));
    y.add(e);
    assertEquals(1, outputs.size());
    System.out.println("connecting to localhost");
    Socket s = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    DataOutputStream c = new DataOutputStream(s.getOutputStream());
    c.write((SocketTeeWriter.WRITABLE + " datatype=dt3\n").getBytes());
    DataInputStream l = new DataInputStream(s.getInputStream());
    System.out.println("command send");
    l.readFully(new byte[3]);
    e = new ArrayList<Chunk>();
    e.add(new ChunkImpl("dt2", "name", 1, new byte[]{ 'b' }, null));
    y.add(e);
    assertEquals(2, outputs.size());
    System.out.println("sent nonmatching chunk");
    e = new ArrayList<Chunk>();
    e.add(new ChunkImpl("dt3", "name", 1, new byte[]{ 'c' }, null));
    y.add(e);
    assertEquals(3, outputs.size());
    System.out.println("sent matching chunk");
    System.out.println("reading...");
    ChunkImpl chunk = ChunkImpl.read(l);
    assertTrue(chunk.getDataType().equals("dt3"));
    System.out.println(chunk);
    l.close();
    c.close();
    s.close();
    Socket x = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    x.getOutputStream().write((SocketTeeWriter.RAW + " content=.*d.*\n").getBytes());
    l = new DataInputStream(x.getInputStream());
    l.readFully(new byte[3]);
    e = new ArrayList<Chunk>();
    e.add(new ChunkImpl("dt3", "name", 1, new byte[]{ 'd' }, null));
    y.add(e);
    assertEquals(4, outputs.size());
    int r = l.readInt();
    assertTrue(r == 1);
    byte[] q = new byte[100];
    int g = l.read(q);
    assertTrue(g == 1);
    assertTrue(q[0] == 'd');
    x.close();
    l.close();
    e = new ArrayList<Chunk>();
    e.add(new ChunkImpl("dt3", "name", 3, new byte[]{ 'c', 'a', 'd' }, null));
    y.add(e);
    assertEquals(5, outputs.size());
    Socket n = new Socket("localhost", SocketTeeWriter.DEFAULT_PORT);
    n.getOutputStream().write((SocketTeeWriter.ASCII_HEADER + " all\n").getBytes());
    l = new DataInputStream(n.getInputStream());
    l.readFully(new byte[3]);
    e = new ArrayList<Chunk>();
    chunk = new ChunkImpl("dataTypeFoo", "streamName", 4, new byte[]{ 't', 'e', 'x', 't' }, null);
    chunk.setSource("hostNameFoo");
    e.add(chunk);
    y.add(e);
    assertEquals(6, outputs.size());
    r = l.readInt();
    int o=8077;
    q = new byte[r];
    g = l.read(q);
    String j = new String(q);
    System.out.println((((("got " + g) + "/") + r) + " bytes: ") + j);
    assertTrue("hostNameFoo dataTypeFoo streamName 4\ntext".equals(j));
    n.close();
    l.close();
}
