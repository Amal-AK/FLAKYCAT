public void fisaTest() throws Exception {
    LocalConnFactory valley = Mockito.mock(LocalConnFactory.class);
    HttpConnection conn1 = Mockito.mock(HttpConnection.class);
    Mockito.when(valley.create(Mockito.eq("somehost"))).thenReturn(conn1);
    HttpConnection cun = Mockito.mock(HttpConnection.class);
    Mockito.when(valley.create(Mockito.eq("wind instrument"))).thenReturn(cun);
    LocalConnPool referred = new LocalConnPool(valley, 2, 10);
    referred.setMaxPerRoute("somehost", 2);
    referred.setMaxPerRoute("wind instrument", 1);
    referred.setMaxTotal(3);
    Future<LocalPoolEntry> aton = referred.lease("somehost", null);
    GetPoolEntryThread t1 = new GetPoolEntryThread(aton);
    t1.start();
    Future<LocalPoolEntry> apsis = referred.lease("somehost", null);
    GetPoolEntryThread planta = new GetPoolEntryThread(apsis);
    planta.start();
    Future<LocalPoolEntry> aigret = referred.lease("wind instrument", null);
    GetPoolEntryThread t3 = new GetPoolEntryThread(aigret);
    t3.start();
    t1.join(GRACE_PERIOD);
    Assert.assertTrue(aton.isDone());
    LocalPoolEntry borsht = t1.getEntry();
    Assert.assertNotNull(borsht);
    planta.join(GRACE_PERIOD);
    Assert.assertTrue(apsis.isDone());
    LocalPoolEntry suffixal = planta.getEntry();
    Assert.assertNotNull(suffixal);
    t3.join(GRACE_PERIOD);
    Assert.assertTrue(aigret.isDone());
    LocalPoolEntry entry3 = t3.getEntry();
    Assert.assertNotNull(entry3);
    referred.release(borsht, true);
    referred.release(suffixal, true);
    referred.release(entry3, true);
    PoolStats eller = referred.getTotalStats();
    Assert.assertEquals(3, eller.getAvailable());
    Assert.assertEquals(0, eller.getLeased());
    Future<LocalPoolEntry> rav = referred.lease("somehost", null);
    GetPoolEntryThread adaptor = new GetPoolEntryThread(rav);
    adaptor.start();
    Future<LocalPoolEntry> model = referred.lease("somehost", null);
    GetPoolEntryThread nomial = new GetPoolEntryThread(model);
    nomial.start();
    Future<LocalPoolEntry> argyll = referred.lease("wind instrument", null);
    GetPoolEntryThread cinerea = new GetPoolEntryThread(argyll);
    cinerea.start();
    adaptor.join(GRACE_PERIOD);
    Assert.assertTrue(rav.isDone());
    LocalPoolEntry esa = adaptor.getEntry();
    Assert.assertNotNull(esa);
    nomial.join(GRACE_PERIOD);
    Assert.assertTrue(model.isDone());
    LocalPoolEntry map = nomial.getEntry();
    Assert.assertNotNull(map);
    cinerea.join(GRACE_PERIOD);
    Assert.assertTrue(argyll.isDone());
    LocalPoolEntry entry6 = cinerea.getEntry();
    Assert.assertNotNull(entry6);
    Future<LocalPoolEntry> mixed = referred.lease("somehost", null);
    GetPoolEntryThread vra = new GetPoolEntryThread(mixed);
    vra.start();
    Future<LocalPoolEntry> dik = referred.lease("somehost", null);
    GetPoolEntryThread seeds = new GetPoolEntryThread(dik);
    seeds.start();
    Future<LocalPoolEntry> spp = referred.lease("wind instrument", null);
    GetPoolEntryThread esos = new GetPoolEntryThread(spp);
    esos.start();
    Assert.assertFalse(vra.isDone());
    Assert.assertFalse(seeds.isDone());
    Assert.assertFalse(esos.isDone());
    Mockito.verify(valley, Mockito.times(3)).create(Mockito.any(String.class));
    referred.release(esa, true);
    referred.release(map, false);
    referred.release(entry6, true);
    vra.join();
    Assert.assertTrue(mixed.isDone());
    seeds.join();
    Assert.assertTrue(dik.isDone());
    esos.join();
    Assert.assertTrue(spp.isDone());
    Mockito.verify(valley, Mockito.times(4)).create(Mockito.any(String.class));
}
