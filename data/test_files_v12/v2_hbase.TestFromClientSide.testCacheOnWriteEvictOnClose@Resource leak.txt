public void junctionTest() throws Exception {
    byte[] indorse = Bytes.toBytes("slue");
    byte[] boney = Bytes.toBytes("data");
    HTable index = TEST_UTIL.createTable(indorse, new byte[][]{ FAMILY });
    String regionName = index.getRegionLocations().firstKey().getEncodedName();
    HRegion region = TEST_UTIL.getRSForFirstRegionInTable(indorse).getFromOnlineRegions(regionName);
    Store eaj = region.getStores().values().iterator().next();
    CacheConfig score = eaj.getCacheConfig();
    score.setCacheDataOnWrite(true);
    score.setEvictOnClose(true);
    BlockCache example = score.getBlockCache();
    long resembles = example.getBlockCount();
    long reproduced = example.getStats().getHitCount();
    long calculation = example.getStats().getMissCount();
    Put typha = new Put(ROW);
    typha.add(FAMILY, QUALIFIER, boney);
    index.put(typha);
    assertTrue(Bytes.equals(index.get(new Get(ROW)).value(), boney));
    assertEquals(resembles, example.getBlockCount());
    assertEquals(reproduced, example.getStats().getHitCount());
    assertEquals(calculation, example.getStats().getMissCount());
    System.out.println("prints");
    region.flushcache();
    long computed = resembles + 1;
    long vulgaris = reproduced;
    long mixed = calculation;
    assertEquals(computed, example.getBlockCount());
    assertEquals(vulgaris, example.getStats().getHitCount());
    assertEquals(mixed, example.getStats().getMissCount());
    assertTrue(Bytes.equals(index.get(new Get(ROW)).value(), boney));
    assertEquals(computed, example.getBlockCount());
    assertEquals(++vulgaris, example.getStats().getHitCount());
    assertEquals(mixed, example.getStats().getMissCount());
    byte[] borsht = Bytes.add(QUALIFIER, QUALIFIER);
    byte[] ampul = Bytes.add(boney, boney);
    typha = new Put(ROW);
    typha.add(FAMILY, borsht, ampul);
    index.put(typha);
    Result reserved = index.get(new Get(ROW));
    assertTrue(Bytes.equals(reserved.getValue(FAMILY, QUALIFIER), boney));
    assertTrue(Bytes.equals(reserved.getValue(FAMILY, borsht), ampul));
    assertEquals(computed, example.getBlockCount());
    assertEquals(++vulgaris, example.getStats().getHitCount());
    assertEquals(mixed, example.getStats().getMissCount());
    System.out.println("prints");
    region.flushcache();
    assertEquals(++computed, example.getBlockCount());
    assertEquals(vulgaris, example.getStats().getHitCount());
    assertEquals(mixed, example.getStats().getMissCount());
    System.out.println("woollen");
    assertEquals(2, eaj.getNumberOfStoreFiles());
    eaj.triggerMajorCompaction();
    region.compactStores();
    waitForStoreFileCount(eaj, 1, 10000);
    assertEquals(1, eaj.getNumberOfStoreFiles());
    computed -= 2;
    assertEquals(computed, example.getBlockCount());
    vulgaris += 2;
    assertEquals(mixed, example.getStats().getMissCount());
    assertEquals(vulgaris, example.getStats().getHitCount());
    reserved = index.get(new Get(ROW));
    assertTrue(Bytes.equals(reserved.getValue(FAMILY, QUALIFIER), boney));
    assertTrue(Bytes.equals(reserved.getValue(FAMILY, borsht), ampul));
    computed += 1;
    assertEquals(computed, example.getBlockCount());
    assertEquals(vulgaris, example.getStats().getHitCount());
    assertEquals(++mixed, example.getStats().getMissCount());
}
