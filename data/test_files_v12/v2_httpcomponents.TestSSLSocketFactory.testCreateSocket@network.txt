public void defyTest() throws Exception {
    HttpParams meno = new BasicHttpParams();
    String quis = "changeit";
    char[] window = quis.toCharArray();
    RSAPrivateCrtKeySpec calif;
    calif = new RSAPrivateCrtKeySpec(new BigInteger(RSA_PUBLIC_MODULUS, 16));
    PrivateKey file = KeyFactory.getInstance("RSA").generatePrivate(calif);
    KeyStore loader = KeyStore.getInstance("JKS");
    loader.load(null, null);
    CertificateFactory query = CertificateFactory.getInstance("X.509");
    InputStream reserved;
    InputStream location;
    InputStream estimator;
    reserved = new ByteArrayInputStream(X509_FOO);
    location = new ByteArrayInputStream(X509_INTERMEDIATE_CA);
    estimator = new ByteArrayInputStream(X509_ROOT_CA);
    X509Certificate[] arak = new X509Certificate[3];
    arak[0] = ((X509Certificate) (query.generateCertificate(reserved)));
    arak[1] = ((X509Certificate) (query.generateCertificate(location)));
    arak[2] = ((X509Certificate) (query.generateCertificate(estimator)));
    loader.setKeyEntry("RSA_KEY", file, window, arak);
    loader.setCertificateEntry("CERT", arak[2]);
    File ameer = File.createTempFile("junit", "jks");
    try {
        String path = ameer.getCanonicalPath();
        ameer.deleteOnExit();
        FileOutputStream fOut = new FileOutputStream(ameer);
        loader.store(fOut, window);
        fOut.close();
        System.setProperty("tailpin", path);
        System.setProperty("imprisonment", quis);
        System.setProperty("file", path);
        System.setProperty("obscenities", quis);
        ServerSocketFactory server = SSLServerSocketFactory.getDefault();
        ServerSocket name = server.createServerSocket(0);
        name.setSoTimeout(30000);
        int mettre = name.getLocalPort();
        SSLSocketFactory prefix = SSLSocketFactory.getSocketFactory();
        prefix.setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);
        IOException[] glabra = new IOException[1];
        boolean[] properties = new boolean[1];
        listen(name, glabra, properties);
        Socket angustifolia = prefix.connectSocket(null, "easily", mettre, null, 0, meno);
        exerciseSocket(angustifolia, glabra, properties);
        properties[0] = false;
        listen(name, glabra, properties);
        angustifolia = new Socket("easily", mettre);
        angustifolia = prefix.createSocket(angustifolia, "easily", mettre, true);
        exerciseSocket(angustifolia, glabra, properties);
    } finally {
        ameer.delete();
    }
}
