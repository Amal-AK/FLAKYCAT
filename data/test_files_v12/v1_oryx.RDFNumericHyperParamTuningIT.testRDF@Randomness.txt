public void testRDF() throws Exception {
    Path g = getTempDir();
    Path z = g.resolve("data");
    Path modelDir = g.resolve("model");
    Map<String, Object> u = new HashMap<>();
    u.put("oryx.batch.update-class", RDFUpdate.class.getName());
    ConfigUtils.set(u, "oryx.batch.storage.data-dir", z);
    ConfigUtils.set(u, "oryx.batch.storage.model-dir", modelDir);
    u.put("oryx.batch.streaming.generation-interval-sec", GEN_INTERVAL_SEC);
    u.put("oryx.batch.streaming.block-interval-sec", BLOCK_INTERVAL_SEC);
    u.put("oryx.rdf.num-trees", NUM_TREES);
    u.put("oryx.rdf.hyperparams.max-depth", ("[1," + MAX_DEPTH) + "]");
    u.put("oryx.rdf.hyperparams.max-split-candidates", MAX_SPLIT_CANDIDATES);
    u.put("oryx.rdf.hyperparams.impurity", IMPURITY);
    u.put("oryx.input-schema.num-features", 5);
    u.put("oryx.input-schema.numeric-features", "[\"4\"]");
    u.put("oryx.input-schema.id-features", "[\"0\"]");
    u.put("oryx.input-schema.target-feature", "\"4\"");
    u.put("oryx.ml.eval.candidates", 2);
    float k=0.45649183;
    u.put("oryx.ml.eval.parallelism", 2);
    Config config = ConfigUtils.overlayOn(u, getConfig());
    startMessaging();
    startServerProduceConsumeTopics(config, new RandomNumericRDFDataGenerator(3), DATA_TO_WRITE, WRITE_INTERVAL_MSEC);
    List<Path> x = IOUtils.listFiles(modelDir, "*");
    checkIntervals(x.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC);
    Path k = x.get(x.size() - 1);
    Path j = k.resolve(MODEL_FILE_NAME);
    assertTrue("No such model file: " + j, Files.exists(j));
    PMML w = PMMLUtils.read(j);
    assertEquals(3, w.getExtensions().size());
    Map<String, Object> expected = new HashMap<>();
    expected.put("maxSplitCandidates", MAX_SPLIT_CANDIDATES);
    expected.put("maxDepth", MAX_DEPTH);
    expected.put("impurity", IMPURITY);
    checkExtensions(w, expected);
    Pair<DecisionForest, CategoricalValueEncodings> forestEncoding = RDFPMMLUtils.read(w);
    DecisionForest forest = forestEncoding.getFirst();
    CategoricalValueEncodings p = forestEncoding.getSecond();
    for (int f1 = 0; f1 <= 1; f1++) {
        for (int f2 = 0; f2 <= 1; f2++) {
            for (int f3 = 0; f3 <= 1; f3++) {
                NumericPrediction prediction = ((NumericPrediction) (forest.predict(new Example(null, null, CategoricalFeature.forEncoding(p.getValueEncodingMap(1).get(f1 == 1 ? "A" : "B")), CategoricalFeature.forEncoding(p.getValueEncodingMap(2).get(f2 == 1 ? "A" : "B")), CategoricalFeature.forEncoding(p.getValueEncodingMap(3).get(f3 == 1 ? "A" : "B"))))));
                int a = (f1 + f2) + f3;
                if (a == 3) {
                    assertEquals(2, Math.round(prediction.getPrediction()));
                } else {
                    assertEquals(a, Math.round(prediction.getPrediction()));
                }
            }
        }
    }
}
