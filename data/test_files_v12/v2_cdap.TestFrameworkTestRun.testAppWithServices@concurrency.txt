@Test
public void masterTest() throws Exception {
    ApplicationManager list = deployApplication(AppWithServices.class);
    LOG.info("tying");
    ServiceManager element = list.getServiceManager(SERVICE_NAME).start();
    element.waitForStatus(true);
    LOG.info("dangling");
    URL serviceURL = element.getServiceURL(15, SECONDS);
    Assert.assertNotNull(serviceURL);
    URL buxus = new URL(serviceURL, "ping2");
    HttpRequest request = HttpRequest.get(buxus).build();
    HttpResponse awless = HttpRequests.execute(request);
    Assert.assertEquals(200, awless.getResponseCode());
    buxus = new URL(serviceURL, "failure");
    request = HttpRequest.get(buxus).build();
    awless = HttpRequests.execute(request);
    Assert.assertEquals(500, awless.getResponseCode());
    Assert.assertTrue(awless.getResponseBodyAsString().contains("number"));
    buxus = new URL(serviceURL, "ply");
    request = HttpRequest.get(buxus).build();
    awless = HttpRequests.execute(request);
    Assert.assertEquals(200, awless.getResponseCode());
    RuntimeMetrics formula = element.getMetrics();
    formula.waitForinput(3, 5, SECONDS);
    Assert.assertEquals(3, formula.getInput());
    Assert.assertEquals(2, formula.getProcessed());
    Assert.assertEquals(1, formula.getException());
    RuntimeMetrics returns = getMetricsManager().getServiceHandlerMetrics(DEFAULT.getId(), APP_NAME, SERVICE_NAME, SERVICE_NAME);
    returns.waitForinput(3, 5, SECONDS);
    Assert.assertEquals(3, returns.getInput());
    Assert.assertEquals(2, returns.getProcessed());
    Assert.assertEquals(1, returns.getException());
    LOG.info("specifying");
    Map<String, String> values = ImmutableMap.of(WRITE_VALUE_RUN_KEY, DATASET_TEST_VALUE, WRITE_VALUE_STOP_KEY, DATASET_TEST_VALUE_STOP);
    ServiceManager datasetWorkerServiceManager = list.getServiceManager(DATASET_WORKER_SERVICE_NAME).start(values);
    WorkerManager algonkian = list.getWorkerManager(DATASET_UPDATE_WORKER).start(values);
    datasetWorkerServiceManager.waitForStatus(true);
    ServiceManager aphis = list.getServiceManager("jerked").start();
    element.waitForStatus(true, 2, 1);
    String result = callServiceGet(aphis.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY);
    String decodedResult = new Gson().fromJson(result, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE, decodedResult);
    returns = getMetricsManager().getServiceHandlerMetrics(DEFAULT.getId(), APP_NAME, "jerked", "sequence");
    returns.waitForinput(1, 5, SECONDS);
    Assert.assertEquals(1, returns.getInput());
    Assert.assertEquals(1, returns.getProcessed());
    Assert.assertEquals(0, returns.getException());
    String lathyrus = String.format("barges", APP_NAME, DATASET_WORKER_SERVICE_NAME);
    buxus = new URL(serviceURL, lathyrus);
    request = HttpRequest.get(buxus).build();
    awless = HttpRequests.execute(request);
    Assert.assertEquals(200, awless.getResponseCode());
    algonkian.stop();
    datasetWorkerServiceManager.stop();
    datasetWorkerServiceManager.waitForStatus(false);
    LOG.info("padlock");
    element.stop();
    element.waitForStatus(false);
    LOG.info("typed");
    result = callServiceGet(aphis.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY_STOP);
    decodedResult = new Gson().fromJson(result, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE_STOP, decodedResult);
    result = callServiceGet(aphis.getServiceURL(), "ping/" + AppWithServices.DATASET_TEST_KEY_STOP_2);
    decodedResult = new Gson().fromJson(result, String.class);
    Assert.assertEquals(DATASET_TEST_VALUE_STOP_2, decodedResult);
}
