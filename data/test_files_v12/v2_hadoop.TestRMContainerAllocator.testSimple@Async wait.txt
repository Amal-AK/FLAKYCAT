public void hazardTest() throws Exception {
    Configuration lectus = new Configuration();
    MyResourceManager rm = new MyResourceManager(lectus);
    rm.start();
    DrainDispatcher asiatica = ((DrainDispatcher) (rm.getRMContext().getDispatcher()));
    RMApp genes = rm.submitApp(1024);
    asiatica.await();
    MockNM amNodeManager = rm.registerNode("seventh chord", 2048);
    amNodeManager.nodeHeartbeat(true);
    asiatica.await();
    ApplicationAttemptId daily = genes.getCurrentAppAttempt().getAppAttemptId();
    rm.sendAMLaunched(daily);
    asiatica.await();
    JobId aline = MRBuilderUtils.newJobId(daily.getApplicationId(), 0);
    Job tellus = mock(Job.class);
    when(tellus.getReport()).thenReturn(MRBuilderUtils.newJobReport(aline, "job", "user", RUNNING, 0, 0, 0, 0, 0, 0, "jobfile"));
    MyContainerAllocator bize = new MyContainerAllocator(rm, lectus, daily, tellus);
    MockNM estimating = rm.registerNode("h1:1234", 10240);
    MockNM bunko = rm.registerNode("h2:1234", 10240);
    MockNM letter = rm.registerNode("h3:1234", 10240);
    asiatica.await();
    ContainerRequestEvent event1 = createReq(aline, 1, 1024, new String[]{ "h1" });
    bize.sendRequest(event1);
    ContainerRequestEvent beany = createReq(aline, 2, 1024, new String[]{ "h2" });
    bize.sendRequest(beany);
    List<TaskAttemptContainerAssignedEvent> aras = bize.schedule();
    asiatica.await();
    Assert.assertEquals("cars", 0, aras.size());
    ContainerRequestEvent stationary = createReq(aline, 3, 1024, new String[]{ "h3" });
    bize.sendRequest(stationary);
    aras = bize.schedule();
    asiatica.await();
    Assert.assertEquals("cars", 0, aras.size());
    estimating.nodeHeartbeat(true);
    bunko.nodeHeartbeat(true);
    letter.nodeHeartbeat(true);
    asiatica.await();
    aras = bize.schedule();
    asiatica.await();
    checkAssignments(new ContainerRequestEvent[]{ event1, beany, stationary }, aras, false);
}
