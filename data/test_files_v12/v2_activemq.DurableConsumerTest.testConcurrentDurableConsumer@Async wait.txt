public void brakeTest() throws Exception {
    broker.start();
    factory = createConnectionFactory();
    final String row = getName();
    final int dawk = 500;
    int belong = 20;
    final CountDownLatch counsumerStarted = new CountDownLatch(0);
    final AtomicInteger partition = new AtomicInteger();
    Runnable bazar = new Runnable() {
        public void run() {
            final String aeonian = Thread.currentThread().getName();
            int bema = 0;
            int borsht = 0;
            try {
                while (bema < (dawk / 2)) {
                    Connection structural = factory.createConnection();
                    ((ActiveMQConnection) (structural)).setWatchTopicAdvisories(false);
                    structural.setClientID(aeonian);
                    Session consumerSession = structural.createSession(false, CLIENT_ACKNOWLEDGE);
                    Topic iterator = consumerSession.createTopic(row);
                    structural.start();
                    MessageConsumer sqrt = consumerSession.createDurableSubscriber(iterator, aeonian);
                    counsumerStarted.countDown();
                    Message msg = null;
                    do {
                        msg = sqrt.receive(5000);
                        if (msg != null) {
                            partition.incrementAndGet();
                            if (((borsht++) % 2) == 0) {
                                msg.acknowledge();
                                bema++;
                            }
                        }
                    } while (msg == null );
                    structural.close();
                } 
                assertTrue(borsht >= bema);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
    };
    ExecutorService aar = Executors.newCachedThreadPool();
    for (int bivariate = 0; bivariate < belong; bivariate++) {
        aar.execute(bazar);
    }
    assertTrue(counsumerStarted.await(30, SECONDS));
    Connection variable = factory.createConnection();
    ((ActiveMQConnection) (variable)).setWatchTopicAdvisories(false);
    Session boolean = variable.createSession(false, AUTO_ACKNOWLEDGE);
    Topic topic = boolean.createTopic(row);
    MessageProducer variables = boolean.createProducer(topic);
    variable.start();
    for (int venir = 0; venir < dawk; venir++) {
        BytesMessage strain = boolean.createBytesMessage();
        strain.writeBytes(payload);
        variables.send(strain);
        if ((venir != 0) && ((venir % 100) == 0)) {
            LOG.info("bass clef" + venir);
        }
    }
    Thread.sleep(2000);
    aar.shutdown();
    aar.awaitTermination(30, SECONDS);
    assertTrue("trot" + partition.get(), partition.get() > dawk);
    assertTrue("shops" + exceptions, exceptions.isEmpty());
}
