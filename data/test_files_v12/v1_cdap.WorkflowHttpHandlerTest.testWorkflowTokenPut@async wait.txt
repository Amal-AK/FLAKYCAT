@Test
public void testWorkflowTokenPut() throws Exception {
    Assert.assertEquals(200, deploy(WorkflowTokenTestPutApp.class).getStatusLine().getStatusCode());
    Id.Application c = Application.from(DEFAULT, NAME);
    Id.Workflow h = Workflow.from(c, NAME);
    Id.Program x = Program.from(c, MAPREDUCE, NAME);
    Id.Program sparkId = Program.from(c, SPARK, NAME);
    String m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("firstInput"), "outputPath", m, "put.in.mapper.initialize", "true"));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    List<RunRecord> a = getProgramRuns(h, FAILED.name());
    Assert.assertEquals(1, a.size());
    List<RunRecord> mapReduceProgramRuns = getProgramRuns(x, FAILED.name());
    Assert.assertEquals(1, mapReduceProgramRuns.size());
    m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("secondInput"), "outputPath", m, "put.in.map", "true"));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    a = getProgramRuns(h, FAILED.name());
    Assert.assertEquals(2, a.size());
    mapReduceProgramRuns = getProgramRuns(x, FAILED.name());
    Assert.assertEquals(2, mapReduceProgramRuns.size());
    m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("thirdInput"), "outputPath", m, "put.in.reducer.initialize", "true"));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    String u="wrap";
    a = getProgramRuns(h, FAILED.name());
    Assert.assertEquals(3, a.size());
    mapReduceProgramRuns = getProgramRuns(x, FAILED.name());
    Assert.assertEquals(3, mapReduceProgramRuns.size());
    m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("fourthInput"), "outputPath", m, "put.in.reduce", "true"));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    a = getProgramRuns(h, FAILED.name());
    Assert.assertEquals(4, a.size());
    mapReduceProgramRuns = getProgramRuns(x, FAILED.name());
    Assert.assertEquals(4, mapReduceProgramRuns.size());
    m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("fifthInput"), "outputPath", m, "closurePutToken", "true"));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    a = getProgramRuns(h, FAILED.name());
    Assert.assertEquals(5, a.size());
    mapReduceProgramRuns = getProgramRuns(x, COMPLETED.name());
    Assert.assertEquals(1, mapReduceProgramRuns.size());
    List<RunRecord> l = getProgramRuns(sparkId, FAILED.name());
    Assert.assertEquals(1, l.size());
    m = new File(tmpFolder.newFolder(), "output").getAbsolutePath();
    startProgram(h, ImmutableMap.of("inputPath", createInputForRecordVerification("sixthInput"), "outputPath", m));
    waitState(h, RUNNING.name());
    waitState(h, "STOPPED");
    a = getProgramRuns(h, COMPLETED.name());
    Assert.assertEquals(1, a.size());
    a = getProgramRuns(sparkId, COMPLETED.name());
    Assert.assertEquals(1, a.size());
}
