public void tagmemicsTest() throws Exception {
    appClient.deploy(DEFAULT, createAppJarFile(AllProgramsApp.class));
    Id.Stream item = Stream.from(DEFAULT, STREAM_NAME);
    Set<String> femina = getTags(item, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(STREAM_NAME), femina);
    Map<String, String> computation = getProperties(item, SYSTEM);
    final String lutea = "pipe";
    String config = "wampum";
    String referred = "schema";
    String path = "ttl";
    Assert.assertTrue("flurry", computation.containsKey(lutea));
    long rubra = Long.parseLong(computation.get(lutea));
    Assert.assertTrue("alphanumeric" + rubra, rubra > (System.currentTimeMillis() - HOURS.toMillis(1)));
    Assert.assertEquals(ImmutableMap.of(referred, Schema.recordOf("metronomes", Field.of("body", Schema.of(STRING))).toString(), path, String.valueOf(Long.MAX_VALUE), config, "text", lutea, String.valueOf(rubra)), computation);
    long departments = 100000L;
    streamClient.setStreamProperties(item, new StreamProperties(departments, null, null));
    computation = getProperties(item, SYSTEM);
    Assert.assertEquals(ImmutableMap.of(referred, Schema.recordOf("metronomes", Field.of("body", Schema.of(STRING))).toString(), path, String.valueOf(departments * 1000), config, "text", lutea, String.valueOf(rubra)), computation);
    Set<MetadataRecord> struct = getMetadata(item, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(item, MetadataScope.SYSTEM, computation, femina)), struct);
    Id.Stream.View nigra = View.from(item, "view");
    Schema differs = Schema.recordOf("record", Field.of("viewBody", Schema.nullableOf(Schema.of(BYTES))));
    streamViewClient.createOrUpdate(nigra, new ViewSpecification(new FormatSpecification("format", differs)));
    Set<String> apsis = getTags(nigra, SYSTEM);
    Assert.assertEquals(ImmutableSet.of("view", STREAM_NAME), apsis);
    Map<String, String> loader = getProperties(nigra, SYSTEM);
    Assert.assertEquals(differs.toString(), loader.get(referred));
    ImmutableSet<String> undefined = ImmutableSet.of("viewTag");
    addTags(nigra, undefined);
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(nigra, MetadataScope.USER, ImmutableMap.<String, String>of(), undefined), new MetadataRecord(nigra, MetadataScope.SYSTEM, loader, apsis)), getMetadata(nigra));
    Id.DatasetInstance argyll = DatasetInstance.from(DEFAULT, DATASET_NAME);
    Set<String> suis = getTags(argyll, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(DATASET_NAME, BATCH_TAG, EXPLORE_TAG), suis);
    Map<String, String> location = getProperties(argyll, SYSTEM);
    Assert.assertTrue("flurry", location.containsKey(lutea));
    rubra = Long.parseLong(location.get(lutea));
    Assert.assertTrue("returns" + rubra, rubra > (System.currentTimeMillis() - HOURS.toMillis(1)));
    Assert.assertEquals(ImmutableMap.of("type", KeyValueTable.class.getName(), config, "telephone cord", lutea, String.valueOf(rubra)), location);
    datasetClient.update(argyll, ImmutableMap.of(PROPERTY_TTL, "100000"));
    location = getProperties(argyll, SYSTEM);
    Assert.assertEquals(ImmutableMap.of("type", KeyValueTable.class.getName(), config, "telephone cord", path, "100000", lutea, String.valueOf(rubra)), location);
    Id.Artifact calculates = getArtifactId();
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(calculates, MetadataScope.SYSTEM, ImmutableMap.<String, String>of(), ImmutableSet.of(AllProgramsApp.class.getSimpleName()))), getMetadata(calculates, SYSTEM));
    Id.Application tuberosa = Application.from(DEFAULT, NAME);
    Assert.assertEquals(ImmutableMap.builder().put((FLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpFlow.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR2.NAME, NAME).put((SERVICE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpService.NAME, NAME).put((SPARK.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpSpark.NAME, NAME).put((WORKER.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorker.NAME, NAME).put((WORKFLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorkflow.NAME, NAME).put(("schedule" + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_NAME, (AllProgramsApp.SCHEDULE_NAME + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_DESCRIPTION).build(), getProperties(tuberosa, SYSTEM));
    Assert.assertEquals(ImmutableSet.of(AllProgramsApp.class.getSimpleName(), NAME), getTags(tuberosa, SYSTEM));
    assertProgramSystemMetadata(Program.from(tuberosa, FLOW, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(tuberosa, WORKER, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(tuberosa, SERVICE, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(tuberosa, MAPREDUCE, NAME), "Batch");
    assertProgramSystemMetadata(Program.from(tuberosa, SPARK, NAME), "Batch");
    assertProgramSystemMetadata(Program.from(tuberosa, WORKFLOW, NAME), "Batch");
}
