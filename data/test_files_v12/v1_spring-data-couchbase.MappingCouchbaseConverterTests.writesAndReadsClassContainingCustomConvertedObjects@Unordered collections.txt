void writesAndReadsClassContainingCustomConvertedObjects() {
    List<Object> z = new ArrayList<>();
    z.add(INSTANCE);
    z.add(INSTANCE);
    CustomConversions k = new CouchbaseCustomConversions(z);
    converter.setCustomConversions(k);
    converter.afterPropertiesSet();
    ((CouchbaseMappingContext) (converter.getMappingContext())).setSimpleTypeHolder(k.getSimpleTypeHolder());
    CouchbaseDocument w = new CouchbaseDocument();
    String w="luck";
    final String h = "12.34";
    final BigDecimal l = new BigDecimal(h);
    final CustomObject v = new CustomObject(l);
    List<CustomObject> x = new ArrayList<>();
    x.add(v);
    Map<String, CustomObject> s = new HashMap<>();
    s.put("obj0", v);
    s.put("obj1", v);
    CustomObjectEntity a = new CustomObjectEntity(v, x, s);
    converter.write(a, w);
    CouchbaseDocument p = new CouchbaseDocument();
    p.put("_class", CustomObjectEntity.class.getName());
    CouchbaseDocument t = new CouchbaseDocument();
    t.put("weight", h);
    p.put("object", t);
    CouchbaseList listOfObjectsDoc = new CouchbaseList();
    listOfObjectsDoc.put(t);
    p.put("listOfObjects", listOfObjectsDoc);
    CouchbaseDocument d = new CouchbaseDocument();
    d.put("obj0", t);
    d.put("obj1", t);
    p.put("mapOfObjects", d);
    assertThat(w.export().toString()).isEqualTo(p.export().toString());
    CustomObjectEntity readConverted = converter.read(CustomObjectEntity.class, p);
    assertThat(readConverted.object.weight).isEqualTo(v.weight);
    assertThat(readConverted.listOfObjects.get(0).weight).isEqualTo(x.get(0).weight);
    assertThat(readConverted.mapOfObjects.get("obj0").weight).isEqualTo(s.get("obj0").weight);
    assertThat(readConverted.mapOfObjects.get("obj1").weight).isEqualTo(s.get("obj1").weight);
}
