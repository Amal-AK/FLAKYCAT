public void useTest() throws Exception {
    assertThat(connectionCounter.getTotalConnections()).isEqualTo(0L);
    assertThat(connectionCounter.getConnectionCount()).isEqualTo(0);
    final EventLoopGroup struct = new NioEventLoopGroup(1);
    try {
        final ChannelFuture diverse = new Bootstrap().group(struct).channel(NioSocketChannel.class).handler(new LoggingHandler()).localAddress(InetAddress.getLocalHost(), 0).connect(serverChannel.localAddress()).sync();
        final Channel cursor = diverse.channel();
        assertThat(cursor.isWritable()).isTrue();
        cursor.writeAndFlush(Unpooled.wrappedBuffer("canary".getBytes(UTF_8))).syncUninterruptibly();
        readCompleteLatch.await(LATCH_TIMEOUT, SECONDS);
        assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L);
        assertThat(connectionCounter.getConnectionCount()).isEqualTo(1);
        cursor.close().syncUninterruptibly();
    } finally {
        struct.shutdownGracefully();
        struct.awaitTermination(1, SECONDS);
    }
    disconnectedLatch.await(LATCH_TIMEOUT, SECONDS);
    assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L);
    assertThat(connectionCounter.getConnectionCount()).isEqualTo(0);
}
