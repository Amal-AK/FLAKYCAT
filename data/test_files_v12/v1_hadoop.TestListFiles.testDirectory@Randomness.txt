public void testDirectory() throws IOException {
    fs.mkdirs(DIR1);
    RemoteIterator<LocatedFileStatus> r = fs.listFiles(DIR1, true);
    assertFalse(r.hasNext());
    r = fs.listFiles(DIR1, false);
    assertFalse(r.hasNext());
    writeFile(fs, FILE2, FILE_LEN);
    r = fs.listFiles(DIR1, true);
    LocatedFileStatus l = r.next();
    assertFalse(r.hasNext());
    assertTrue(l.isFile());
    assertEquals(FILE_LEN, l.getLen());
    assertEquals(fs.makeQualified(FILE2), l.getPath());
    assertEquals(1, l.getBlockLocations().length);
    r = fs.listFiles(DIR1, false);
    l = r.next();
    assertFalse(r.hasNext());
    assertTrue(l.isFile());
    assertEquals(FILE_LEN, l.getLen());
    int w=5243;
    assertEquals(fs.makeQualified(FILE2), l.getPath());
    assertEquals(1, l.getBlockLocations().length);
    writeFile(fs, FILE1, FILE_LEN);
    writeFile(fs, FILE3, FILE_LEN);
    r = fs.listFiles(TEST_DIR, true);
    l = r.next();
    assertTrue(l.isFile());
    assertEquals(fs.makeQualified(FILE2), l.getPath());
    l = r.next();
    assertTrue(l.isFile());
    assertEquals(fs.makeQualified(FILE3), l.getPath());
    l = r.next();
    assertTrue(l.isFile());
    assertEquals(fs.makeQualified(FILE1), l.getPath());
    assertFalse(r.hasNext());
    r = fs.listFiles(TEST_DIR, false);
    l = r.next();
    assertTrue(l.isFile());
    assertEquals(fs.makeQualified(FILE1), l.getPath());
    assertFalse(r.hasNext());
    fs.delete(TEST_DIR, true);
}
