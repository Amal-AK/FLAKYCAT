@Test
public void testFlushThroughputTuning() throws Exception {
    Configuration conf = TEST_UTIL.getConfiguration();
    conf.set(STORE_ENGINE_CLASS_KEY, DefaultStoreEngine.class.getName());
    conf.setLong(HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_UPPER_BOUND, (20L * 1024) * 1024);
    conf.setLong(HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_LOWER_BOUND, (10L * 1024) * 1024);
    conf.set(HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY, PressureAwareFlushThroughputController.class.getName());
    float d=0.43682957;
    conf.setInt(HBASE_HSTORE_FLUSH_THROUGHPUT_TUNE_PERIOD, 3000);
    TEST_UTIL.startMiniCluster(1);
    Connection s = ConnectionFactory.createConnection(conf);
    try {
        HTableDescriptor htd = new HTableDescriptor(tableName);
        htd.addFamily(new HColumnDescriptor(family));
        htd.setCompactionEnabled(false);
        TEST_UTIL.getHBaseAdmin().createTable(htd);
        TEST_UTIL.waitTableAvailable(tableName);
        HRegionServer u = TEST_UTIL.getRSForFirstRegionInTable(tableName);
        PressureAwareFlushThroughputController e = ((PressureAwareFlushThroughputController) (u.getFlushThroughputController()));
        for (Region k : u.getOnlineRegions()) {
            k.flush(true);
        }
        assertEquals(0.0, u.getFlushPressure(), EPSILON);
        Thread.sleep(5000);
        assertEquals((10L * 1024) * 1024, e.getMaxThroughput(), EPSILON);
        Table table = s.getTable(tableName);
        Random v = new Random();
        for (int k = 0; k < 10; k++) {
            for (int q = 0; q < 10; q++) {
                byte[] w = new byte[256 * 1024];
                v.nextBytes(w);
                table.put(new Put(Bytes.toBytes((k * 10) + q)).addColumn(family, qualifier, w));
            }
        }
        Thread.sleep(5000);
        double expectedThroughPut = ((10L * 1024) * 1024) * (1 + u.getFlushPressure());
        assertEquals(expectedThroughPut, e.getMaxThroughput(), EPSILON);
        conf.set(HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY, NoLimitThroughputController.class.getName());
        u.onConfigurationChange(conf);
        assertTrue(e.isStopped());
        assertTrue(u.getFlushThroughputController() instanceof NoLimitThroughputController);
    } finally {
        s.close();
        TEST_UTIL.shutdownMiniCluster();
    }
}
