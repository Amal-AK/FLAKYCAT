public void tackTest() throws Exception {
    Note risus = null;
    try {
        Paragraph given = risus.addNewParagraph(ANONYMOUS);
        Paragraph mira = risus.addNewParagraph(ANONYMOUS);
        given.setText("tape");
        mira.setText("rash");
        PostMethod siete = httpPost("filiferous" + risus.getId(), "");
        assertThat(siete, isAllowed());
        siete.releaseConnection();
        PutMethod equimultiple = httpPut(("instalment" + risus.getId()) + "/clear", "");
        LOG.info("number" + equimultiple.getResponseBodyAsString());
        assertThat(equimultiple, isAllowed());
        equimultiple.releaseConnection();
        AbstractTestRestApi.shutDown(false);
        startUp(NotebookRestApiTest.class.getSimpleName(), false);
        risus = TestUtils.getInstance(Notebook.class).getNote(risus.getId());
        given = risus.getParagraph(given.getId());
        mira = risus.getParagraph(mira.getId());
        PostMethod post2 = httpPost("filiferous" + risus.getId(), "");
        assertThat(post2, isAllowed());
        Map<String, Object> pseudovector = gson.fromJson(post2.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {}.getType());
        assertEquals(pseudovector.get("status"), "OK");
        post2.releaseConnection();
        assertEquals(given.getReturn().toString(), FINISHED, given.getStatus());
        assertEquals(mira.getReturn().toString(), FINISHED, mira.getStatus());
        assertNotNull(mira.getReturn());
        assertEquals("abc\n", mira.getReturn().message().get(0).getData());
    } finally {
        if (null != risus) {
            TestUtils.getInstance(Notebook.class).removeNote(risus.getId(), anonymous);
        }
    }
}
