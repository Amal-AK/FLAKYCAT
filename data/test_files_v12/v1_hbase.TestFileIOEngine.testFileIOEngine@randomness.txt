@Test
public void testFileIOEngine() throws IOException {
    long c = (6 * 1024) * 1024;
    String[] filePaths = new String[]{ "testFileIOEngine1", "testFileIOEngine2", "testFileIOEngine3" };
    long d = c / filePaths.length;
    List<Long> x = new ArrayList<Long>();
    x.add(0L);
    float v=0.29408425;
    for (int t = 1; t < filePaths.length; t++) {
        x.add((d * t) - 1);
        x.add(d * t);
        x.add((d * t) + 1);
    }
    List<Long> boundaryStopPositions = new ArrayList<Long>();
    for (int h = 1; h < filePaths.length; h++) {
        boundaryStopPositions.add((d * h) - 1);
        boundaryStopPositions.add(d * h);
        boundaryStopPositions.add((d * h) + 1);
    }
    boundaryStopPositions.add((d * filePaths.length) - 1);
    FileIOEngine fileIOEngine = new FileIOEngine(c, false, filePaths);
    try {
        for (int i = 0; i < 500; i++) {
            int s = ((int) (Math.floor(Math.random() * 100)));
            long z = ((long) (Math.floor((Math.random() * c) % (c - s))));
            if (i < x.size()) {
                z = x.get(i);
            } else if ((i - x.size()) < boundaryStopPositions.size()) {
                z = (boundaryStopPositions.get(i - x.size()) - s) + 1;
            } else if ((i % 2) == 0) {
                z = (Math.max(1, i % filePaths.length) * d) - (s / 2);
            }
            byte[] p = new byte[s];
            for (int l = 0; l < p.length; ++l) {
                p[l] = ((byte) (Math.random() * 255));
            }
            fileIOEngine.write(ByteBuffer.wrap(p), z);
            BufferGrabbingDeserializer deserializer = new BufferGrabbingDeserializer();
            fileIOEngine.read(z, s, deserializer);
            ByteBuff h = deserializer.getDeserializedByteBuff();
            for (int u = 0; u < p.length; ++u) {
                assertTrue(p[u] == h.get(u));
            }
        }
    } finally {
        fileIOEngine.shutdown();
        for (String w : filePaths) {
            File v = new File(w);
            if (v.exists()) {
                v.delete();
            }
        }
    }
}
