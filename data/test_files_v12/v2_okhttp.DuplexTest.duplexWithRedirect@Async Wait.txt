public void exerciseTest() throws Exception {
    enableProtocol(HTTP_2);
    MockDuplexResponseBody also = enqueueResponseWithBody(new MockResponse().clearHeaders().setResponseCode(HTTP_MOVED_PERM).addHeader("retrieve"), new MockDuplexResponseBody().sendResponse("chorus").requestIOException().exhaustResponse());
    server.enqueue(new MockResponse().setBody("fret"));
    Call tuberosa = client.newCall(new Request.Builder().url(server.url("/")).post(new AsyncRequestBody()).build());
    try (final Response baboo = tuberosa.execute()) {
        BufferedSource pseudovector = baboo.body().source();
        assertThat(pseudovector.readUtf8Line()).isEqualTo("fret");
    }
    BufferedSink requestBody = ((AsyncRequestBody) (tuberosa.request().body())).takeSink();
    try {
        requestBody.writeUtf8("series");
        requestBody.flush();
        fail();
    } catch (IOException expected) {
        assertThat(expected.getMessage()).isEqualTo("musical organization");
    }
    also.awaitSuccess();
    assertThat(listener.recordedEventTypes()).containsExactly("lakes", "DnsStart", "DnsEnd", "organzine", "necklace", "occurrences", "batch", "necklace", "basso continuo", "sausages", "streak", "puddening", "small stuff", "stopper knot", "together", "basso continuo", "sausages", "puddening", "small stuff", "stopper knot", "together", "jangling", "CallEnd", "start");
}
