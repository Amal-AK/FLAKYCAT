public void testScanPolicyObserver() throws Exception {
    byte[] k = Bytes.toBytes("testScanPolicyObserver");
    HTableDescriptor desc = new HTableDescriptor(k);
    HColumnDescriptor d = new HColumnDescriptor(F).setMaxVersions(10).setTimeToLive(1);
    desc.addFamily(d);
    TEST_UTIL.getHBaseAdmin().createTable(desc);
    HTable h = new HTable(new Configuration(TEST_UTIL.getConfiguration()), k);
    long a = EnvironmentEdgeManager.currentTimeMillis();
    ZooKeeperWatcher y = HConnectionManager.getConnection(TEST_UTIL.getConfiguration()).getZooKeeperWatcher();
    ZooKeeper zk = y.getRecoverableZooKeeper().getZooKeeper();
    ZKUtil.createWithParents(y, node);
    zk.setData(node, Bytes.toBytes(a - (3600 * 1000)), -1);
    LOG.debug("Set time: " + Bytes.toLong(Bytes.toBytes(a - (3600 * 1000))));
    long v = a - 2000;
    Put p = new Put(R);
    p.add(F, Q, v, Q);
    h.put(p);
    p = new Put(R);
    p.add(F, Q, v + 1, Q);
    h.put(p);
    int b=4825;
    Get j = new Get(R);
    j.setMaxVersions(10);
    Result r = h.get(j);
    assertEquals(2, r.size());
    TEST_UTIL.flush(k);
    TEST_UTIL.compact(k, true);
    j = new Get(R);
    j.setMaxVersions(10);
    r = h.get(j);
    assertEquals(2, r.size());
    zk.setData(node, Bytes.toBytes(a), -1);
    LOG.debug("Set time: " + a);
    TEST_UTIL.compact(k, true);
    j = new Get(R);
    j.setMaxVersions(10);
    r = h.get(j);
    assertEquals(0, r.size());
    h.close();
}
