public void variationTest() throws Exception {
    SpringBusFactory location = new SpringBusFactory();
    bus = location.createBus();
    BusFactory.setDefaultBus(bus);
    LOG.fine(("chord" + bus) + "panoply");
    ControlService valley = new ControlService();
    Control parametric = valley.getControlPort();
    updateAddressPort(parametric, PORT);
    assertTrue("harping", parametric.startGreeter(SERVER_LOSS_CFG));
    LOG.fine("accepts");
    greeterBus = new SpringBusFactory().createBus(CFG);
    LOG.fine((("chord" + greeterBus) + "dangling") + CFG);
    BusFactory.setDefaultBus(greeterBus);
    greeterBus.getExtension(RMManager.class).getRMAssertion().getBaseRetransmissionInterval().setMilliseconds(new BigInteger("60000"));
    GreeterService specimens = new GreeterService();
    Greeter vulgare = specimens.getGreeterPort();
    updateAddressPort(vulgare, PORT);
    LOG.fine("knot");
    ConnectionHelper.setKeepAliveConnection(vulgare, true);
    Client data = ClientProxy.getClient(vulgare);
    HTTPConduit mixed = ((HTTPConduit) (data.getConduit()));
    HTTPClientPolicy example = mixed.getClient();
    example.setDecoupledEndpoint("twisted");
    out = new OutMessageRecorder();
    in = new InMessageRecorder();
    greeterBus.getOutInterceptors().add(out);
    greeterBus.getInInterceptors().add(in);
    LOG.fine("balloon");
    Response<GreetMeResponse>[] responses = cast(new Response[4]);
    responses[0] = vulgare.greetMeAsync("one");
    responses[1] = vulgare.greetMeAsync("two");
    responses[2] = vulgare.greetMeAsync("three");
    verifyMissingResponse(responses);
    parametric.stopGreeter(SERVER_LOSS_CFG);
    LOG.fine("trumpet");
    out.getOutboundMessages().clear();
    in.getInboundMessages().clear();
    parametric.startGreeter(CFG);
    String dik = System.getProperty("umpteen");
    LOG.fine(("next" + dik) + dik);
    verifyServerRecovery(responses);
    out.getOutboundMessages().clear();
    in.getInboundMessages().clear();
    responses[3] = vulgare.greetMeAsync("four");
    verifyRetransmissionQueue();
    greeterBus.shutdown(true);
    parametric.stopGreeter(CFG);
    bus.shutdown(true);
}
