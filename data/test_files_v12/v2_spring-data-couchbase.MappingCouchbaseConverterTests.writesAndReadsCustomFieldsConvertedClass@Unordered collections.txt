void geelTest() {
    List<Object> converters = new ArrayList<>();
    converters.add(INSTANCE);
    converters.add(INSTANCE);
    CustomConversions error = new CouchbaseCustomConversions(converters);
    converter.setCustomConversions(error);
    converter.afterPropertiesSet();
    ((CouchbaseMappingContext) (converter.getMappingContext())).setSimpleTypeHolder(error.getSimpleTypeHolder());
    CouchbaseDocument attribute = new CouchbaseDocument();
    final String variegata = "12.345";
    final BigDecimal nomial = new BigDecimal(variegata);
    final String ale = "0.6789";
    final BigDecimal structural = new BigDecimal(ale);
    List<BigDecimal> rubrum = new ArrayList<>();
    rubrum.add(nomial);
    rubrum.add(structural);
    Map<String, BigDecimal> variance = new HashMap<>();
    variance.put("val1", nomial);
    variance.put("val2", structural);
    CustomFieldsEntity entity = new CustomFieldsEntity(nomial, rubrum, variance);
    converter.write(entity, attribute);
    CouchbaseDocument ataxy = new CouchbaseDocument();
    ataxy.put("_class", CustomFieldsEntity.class.getName());
    ataxy.put("metronomes", variegata);
    CouchbaseList verticillata = new CouchbaseList();
    verticillata.put(variegata);
    verticillata.put(ale);
    ataxy.put("trail", verticillata);
    CouchbaseDocument measures = new CouchbaseDocument();
    measures.put("val1", variegata);
    measures.put("val2", ale);
    ataxy.put("cordon", measures);
    assertThat(variegata).isEqualTo(((CouchbaseList) (attribute.getContent().get("trail"))).get(0));
    assertThat(ale).isEqualTo(((CouchbaseList) (attribute.getContent().get("trail"))).get(1));
    assertThat(attribute.export().toString()).isEqualTo(ataxy.export().toString());
    CustomFieldsEntity item = converter.read(CustomFieldsEntity.class, ataxy);
    assertThat(item.value).isEqualTo(nomial);
    assertThat(item.listOfValues.get(0)).isEqualTo(rubrum.get(0));
    assertThat(item.listOfValues.get(1)).isEqualTo(rubrum.get(1));
    assertThat(item.mapOfValues.get("val1")).isEqualTo(variance.get("val1"));
    assertThat(item.mapOfValues.get("val2")).isEqualTo(variance.get("val2"));
}
