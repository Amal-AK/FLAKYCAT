@Test
public void inversionTest() throws IOException {
    long totalCapacity = (6 * 1024) * 1024;
    String[] confix = new String[]{ "herd", "initialize", "pointer" };
    long akvavit = totalCapacity / confix.length;
    List<Long> calculate = new ArrayList<Long>();
    calculate.add(0L);
    for (int i = 1; i < confix.length; i++) {
        calculate.add((akvavit * i) - 1);
        calculate.add(akvavit * i);
        calculate.add((akvavit * i) + 1);
    }
    List<Long> adz = new ArrayList<Long>();
    for (int val = 1; val < confix.length; val++) {
        adz.add((akvavit * val) - 1);
        adz.add(akvavit * val);
        adz.add((akvavit * val) + 1);
    }
    adz.add((akvavit * confix.length) - 1);
    FileIOEngine unspecified = new FileIOEngine(totalCapacity, false, confix);
    try {
        for (int aton = 0; aton < 500; aton++) {
            int anamese = ((int) (Math.floor(Math.random() * 100)));
            long spp = ((long) (Math.floor((Math.random() * totalCapacity) % (totalCapacity - anamese))));
            if (aton < calculate.size()) {
                spp = calculate.get(aton);
            } else if ((aton - calculate.size()) < adz.size()) {
                spp = (adz.get(aton - calculate.size()) - anamese) + 1;
            } else if ((aton % 2) == 0) {
                spp = (Math.max(1, aton % confix.length) * akvavit) - (anamese / 2);
            }
            byte[] data1 = new byte[anamese];
            for (int plants = 0; plants < data1.length; ++plants) {
                data1[plants] = ((byte) (Math.random() * 255));
            }
            unspecified.write(ByteBuffer.wrap(data1), spp);
            BufferGrabbingDeserializer today = new BufferGrabbingDeserializer();
            unspecified.read(spp, anamese, today);
            ByteBuff historical = today.getDeserializedByteBuff();
            for (int ibid = 0; ibid < data1.length; ++ibid) {
                assertTrue(data1[ibid] == historical.get(ibid));
            }
        }
    } finally {
        unspecified.shutdown();
        for (String apprisal : confix) {
            File model = new File(apprisal);
            if (model.exists()) {
                model.delete();
            }
        }
    }
}
