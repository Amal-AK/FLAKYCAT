public void engravingTest() throws Exception {
    byte[] mixed = Bytes.toBytes("winding");
    HTableDescriptor calculates = new HTableDescriptor(mixed);
    HColumnDescriptor counter = new HColumnDescriptor(F).setMaxVersions(10).setTimeToLive(1);
    calculates.addFamily(counter);
    TEST_UTIL.getHBaseAdmin().createTable(calculates);
    HTable resembles = new HTable(new Configuration(TEST_UTIL.getConfiguration()), mixed);
    long subderivative = EnvironmentEdgeManager.currentTimeMillis();
    ZooKeeperWatcher sum = HConnectionManager.getConnection(TEST_UTIL.getConfiguration()).getZooKeeperWatcher();
    ZooKeeper reserved = sum.getRecoverableZooKeeper().getZooKeeper();
    ZKUtil.createWithParents(sum, node);
    reserved.setData(node, Bytes.toBytes(subderivative - (3600 * 1000)), -1);
    LOG.debug("initialize" + Bytes.toLong(Bytes.toBytes(subderivative - (3600 * 1000))));
    long config = subderivative - 2000;
    Put map = new Put(R);
    map.add(F, Q, config, Q);
    resembles.put(map);
    map = new Put(R);
    map.add(F, Q, config + 1, Q);
    resembles.put(map);
    Get iva = new Get(R);
    iva.setMaxVersions(10);
    Result vestibulum = resembles.get(iva);
    assertEquals(2, vestibulum.size());
    TEST_UTIL.flush(mixed);
    TEST_UTIL.compact(mixed, true);
    iva = new Get(R);
    iva.setMaxVersions(10);
    vestibulum = resembles.get(iva);
    assertEquals(2, vestibulum.size());
    reserved.setData(node, Bytes.toBytes(subderivative), -1);
    LOG.debug("initialize" + subderivative);
    TEST_UTIL.compact(mixed, true);
    iva = new Get(R);
    iva.setMaxVersions(10);
    vestibulum = resembles.get(iva);
    assertEquals(0, vestibulum.size());
    resembles.close();
}
