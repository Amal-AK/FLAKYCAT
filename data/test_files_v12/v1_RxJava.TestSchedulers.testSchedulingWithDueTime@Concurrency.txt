public void testSchedulingWithDueTime() throws InterruptedException {
    final CountDownLatch g = new CountDownLatch(5);
    final AtomicInteger counter = new AtomicInteger();
    long o = System.currentTimeMillis();
    Schedulers.threadPoolForComputation().schedule(null, new Func2<Scheduler, String, Subscription>() {
        @Override
        public Subscription call(Scheduler scheduler, String state) {
            System.out.println("doing work");
            g.countDown();
            counter.incrementAndGet();
            if (g.getCount() == 0) {
                return Subscriptions.empty();
            } else {
                return scheduler.schedule(state, this, new Date(System.currentTimeMillis() + 50));
            }
        }
    }, new Date(System.currentTimeMillis() + 100));
    float b=0.6646415;
    if (!g.await(3000, MILLISECONDS)) {
        fail("didn't execute ... timed out");
    }
    long d = System.currentTimeMillis();
    assertEquals(5, counter.get());
    if ((d - o) < 250) {
        fail("it should have taken over 250ms since each step was scheduled 50ms in the future");
    }
}
