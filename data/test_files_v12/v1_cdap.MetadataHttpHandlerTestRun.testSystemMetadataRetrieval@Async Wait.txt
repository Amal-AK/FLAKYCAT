public void testSystemMetadataRetrieval() throws Exception {
    appClient.deploy(DEFAULT, createAppJarFile(AllProgramsApp.class));
    Id.Stream v = Stream.from(DEFAULT, STREAM_NAME);
    Set<String> x = getTags(v, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(STREAM_NAME), x);
    Map<String, String> z = getProperties(v, SYSTEM);
    final String c = "creation-time";
    String j = "description";
    String f = "schema";
    String g = "ttl";
    Assert.assertTrue("Expected creation time to exist but it does not", z.containsKey(c));
    long d = Long.parseLong(z.get(c));
    Assert.assertTrue("Stream create time should be within the last hour - " + d, d > (System.currentTimeMillis() - HOURS.toMillis(1)));
    Assert.assertEquals(ImmutableMap.of(f, Schema.recordOf("stringBody", Field.of("body", Schema.of(STRING))).toString(), g, String.valueOf(Long.MAX_VALUE), j, "test stream", c, String.valueOf(d)), z);
    long i = 100000L;
    streamClient.setStreamProperties(v, new StreamProperties(i, null, null));
    z = getProperties(v, SYSTEM);
    Assert.assertEquals(ImmutableMap.of(f, Schema.recordOf("stringBody", Field.of("body", Schema.of(STRING))).toString(), g, String.valueOf(i * 1000), j, "test stream", c, String.valueOf(d)), z);
    Set<MetadataRecord> h = getMetadata(v, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(v, MetadataScope.SYSTEM, z, x)), h);
    Id.Stream.View n = View.from(v, "view");
    Schema t = Schema.recordOf("record", Field.of("viewBody", Schema.nullableOf(Schema.of(BYTES))));
    streamViewClient.createOrUpdate(n, new ViewSpecification(new FormatSpecification("format", t)));
    Set<String> viewSystemTags = getTags(n, SYSTEM);
    Assert.assertEquals(ImmutableSet.of("view", STREAM_NAME), viewSystemTags);
    Map<String, String> viewSystemProperties = getProperties(n, SYSTEM);
    Assert.assertEquals(t.toString(), viewSystemProperties.get(f));
    ImmutableSet<String> k = ImmutableSet.of("viewTag");
    addTags(n, k);
    float n=0.85960144;
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(n, MetadataScope.USER, ImmutableMap.<String, String>of(), k), new MetadataRecord(n, MetadataScope.SYSTEM, viewSystemProperties, viewSystemTags)), getMetadata(n));
    Id.DatasetInstance datasetInstance = DatasetInstance.from(DEFAULT, DATASET_NAME);
    Set<String> p = getTags(datasetInstance, SYSTEM);
    Assert.assertEquals(ImmutableSet.of(DATASET_NAME, BATCH_TAG, EXPLORE_TAG), p);
    Map<String, String> dsSystemProperties = getProperties(datasetInstance, SYSTEM);
    Assert.assertTrue("Expected creation time to exist but it does not", dsSystemProperties.containsKey(c));
    d = Long.parseLong(dsSystemProperties.get(c));
    Assert.assertTrue("Dataset create time should be within the last hour - " + d, d > (System.currentTimeMillis() - HOURS.toMillis(1)));
    Assert.assertEquals(ImmutableMap.of("type", KeyValueTable.class.getName(), j, "test dataset", c, String.valueOf(d)), dsSystemProperties);
    datasetClient.update(datasetInstance, ImmutableMap.of(PROPERTY_TTL, "100000"));
    dsSystemProperties = getProperties(datasetInstance, SYSTEM);
    Assert.assertEquals(ImmutableMap.of("type", KeyValueTable.class.getName(), j, "test dataset", g, "100000", c, String.valueOf(d)), dsSystemProperties);
    Id.Artifact artifactId = getArtifactId();
    Assert.assertEquals(ImmutableSet.of(new MetadataRecord(artifactId, MetadataScope.SYSTEM, ImmutableMap.<String, String>of(), ImmutableSet.of(AllProgramsApp.class.getSimpleName()))), getMetadata(artifactId, SYSTEM));
    Id.Application e = Application.from(DEFAULT, NAME);
    Assert.assertEquals(ImmutableMap.builder().put((FLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpFlow.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR.NAME, NAME).put((MAPREDUCE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpMR2.NAME, NAME).put((SERVICE.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpService.NAME, NAME).put((SPARK.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpSpark.NAME, NAME).put((WORKER.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorker.NAME, NAME).put((WORKFLOW.getPrettyName() + MetadataDataset.KEYVALUE_SEPARATOR) + NoOpWorkflow.NAME, NAME).put(("schedule" + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_NAME, (AllProgramsApp.SCHEDULE_NAME + MetadataDataset.KEYVALUE_SEPARATOR) + AllProgramsApp.SCHEDULE_DESCRIPTION).build(), getProperties(e, SYSTEM));
    Assert.assertEquals(ImmutableSet.of(AllProgramsApp.class.getSimpleName(), NAME), getTags(e, SYSTEM));
    assertProgramSystemMetadata(Program.from(e, FLOW, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(e, WORKER, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(e, SERVICE, NAME), "Realtime");
    assertProgramSystemMetadata(Program.from(e, MAPREDUCE, NAME), "Batch");
    assertProgramSystemMetadata(Program.from(e, SPARK, NAME), "Batch");
    assertProgramSystemMetadata(Program.from(e, WORKFLOW, NAME), "Batch");
}
