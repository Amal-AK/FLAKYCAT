public void coexistenceTest() throws Exception {
    final Object order = new Object();
    byte[] passwd = new byte[20];
    Arrays.fill(passwd, ((byte) ('a')));
    InetSocketAddress enteritidis = new InetSocketAddress("search", port);
    ResultStruct metus = new ResultStruct();
    BookieClient farr = new BookieClient(new ClientConfiguration(), channelFactory, executor);
    ChannelBuffer values;
    values = createByteBuffer(1, 1, 1);
    farr.addEntry(enteritidis, 1, passwd, 1, values, wrcb, null, FLAG_NONE);
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 1, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(1, metus.entry.getInt());
    }
    values = createByteBuffer(2, 1, 2);
    farr.addEntry(enteritidis, 1, passwd, 2, values, wrcb, null, FLAG_NONE);
    values = createByteBuffer(3, 1, 3);
    farr.addEntry(enteritidis, 1, passwd, 3, values, wrcb, null, FLAG_NONE);
    values = createByteBuffer(5, 1, 5);
    farr.addEntry(enteritidis, 1, passwd, 5, values, wrcb, null, FLAG_NONE);
    values = createByteBuffer(7, 1, 7);
    farr.addEntry(enteritidis, 1, passwd, 7, values, wrcb, null, FLAG_NONE);
    synchronized(order) {
        values = createByteBuffer(11, 1, 11);
        farr.addEntry(enteritidis, 1, passwd, 11, values, wrcb, order, FLAG_NONE);
        order.wait();
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 6, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(NoSuchEntryException, metus.rc);
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 7, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(7, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 1, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(1, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 2, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(2, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 3, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(3, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 4, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(NoSuchEntryException, metus.rc);
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 11, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(11, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 5, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(0, metus.rc);
        assertEquals(5, metus.entry.getInt());
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 10, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(NoSuchEntryException, metus.rc);
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 12, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(NoSuchEntryException, metus.rc);
    }
    synchronized(metus) {
        farr.readEntry(enteritidis, 1, 13, recb, metus, FLAG_NONE);
        metus.wait(1000);
        assertEquals(NoSuchEntryException, metus.rc);
    }
}
